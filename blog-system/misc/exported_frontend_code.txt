// C:\thangs\NODE_JS\blog-system_backup\blog-system\frontend\index.html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + Vue</title>
  </head>
  <body>
    <div id="app"></div>
    <script type="module" src="/src/main.js"></script>
  </body>
</html>


// C:\thangs\NODE_JS\blog-system_backup\blog-system\frontend\vite.config.js
// vite.config.js
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import path from 'path'

export default defineConfig({
  plugins: [vue()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src')
    }
  }
})

// C:\thangs\NODE_JS\blog-system_backup\blog-system\frontend\src\assets\main.css
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  body {
    @apply bg-gray-50 text-gray-800 font-sans;
  }
  h1, h2, h3, h4, h5, h6 {
    @apply font-semibold;
  }
}

// C:\thangs\NODE_JS\blog-system_backup\blog-system\frontend\src\main.js
import { createApp } from 'vue'
import { createPinia } from 'pinia'
import App from './App.vue'
import router from './router'
import './assets/main.css'

const app = createApp(App)

app.use(createPinia())
app.use(router)

app.mount('#app')

// C:\thangs\NODE_JS\blog-system_backup\blog-system\frontend\src\App.vue
<template>
  <div class="app-container">
    <Header />
    <ContentContainer>
      <router-view />
    </ContentContainer>
    <Footer />
  </div>
</template>

<script setup>
import Header from './components/layout/Header.vue' // Corrected path
import Footer from './components/layout/Footer.vue'
import ContentContainer from './components/layout/ContentContainer.vue'
</script>

<style>
.app-container {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
}
</style>

// C:\thangs\NODE_JS\blog-system_backup\blog-system\frontend\src\components\auth\OwnerLoginForm.vue
<template>
    <div class="owner-login-form">
      <h2>Blog Owner Login</h2>
      <form @submit.prevent="handleSubmit">
        <div class="form-group">
          <label for="email">Email</label>
          <input 
            id="email" 
            v-model="email" 
            type="email" 
            placeholder="Enter your email"
            required
          />
          <p v-if="errors.email" class="error-message">{{ errors.email }}</p>
        </div>
        
        <div class="form-group">
          <label for="password">Password</label>
          <input 
            id="password" 
            v-model="password" 
            type="password" 
            placeholder="Enter your password"
            required
          />
          <p v-if="errors.password" class="error-message">{{ errors.password }}</p>
        </div>
        
        <p v-if="errorMessage" class="error-message">{{ errorMessage }}</p>
        
        <button type="submit" :disabled="isSubmitting">
          {{ isSubmitting ? 'Logging in...' : 'Login as Owner' }}
        </button>
        
        <div class="actions">
          <router-link to="/login">Regular user login</router-link>
        </div>
      </form>
    </div>
  </template>
  
  <script setup>
  import { ref } from 'vue';
  import { useRouter } from 'vue-router';
  import { useAuthStore } from '@/stores/auth';
  
  const router = useRouter();
  const authStore = useAuthStore();
  
  // Form data
  const email = ref('');
  const password = ref('');
  const isSubmitting = ref(false);
  const errorMessage = ref('');
  const errors = ref({
    email: '',
    password: ''
  });
  
  const handleSubmit = async () => {
    // Reset errors
    errors.value = {
      email: '',
      password: ''
    };
    errorMessage.value = '';
    
    try {
      isSubmitting.value = true;
      
      // Call the login action from auth store with owner flag
      await authStore.loginAsOwner({
        email: email.value,
        password: password.value
      });
      
      // Redirect to admin dashboard after successful login
      router.push('/admin/dashboard');
    } catch (error) {
      console.error('Owner login error:', error);
      
      // Handle validation errors
      if (error.response && error.response.data && error.response.data.errors) {
        const validationErrors = error.response.data.errors;
        validationErrors.forEach(err => {
          if (err.path === 'email') {
            errors.value.email = err.msg;
          } else if (err.path === 'password') {
            errors.value.password = err.msg;
          }
        });
      } else if (error.response && error.response.data && error.response.data.message) {
        // Handle general error message
        errorMessage.value = error.response.data.message;
      } else {
        // Fallback error message
        errorMessage.value = 'Login failed. Please try again.';
      }
    } finally {
      isSubmitting.value = false;
    }
  };
  </script>
  
  <style scoped>
  .owner-login-form {
    padding: 20px;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    background-color: #f9f9f9;
  }
  
  .form-group {
    margin-bottom: 15px;
  }
  
  label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
  }
  
  input {
    width: 100%;
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
  }
  
  button {
    width: 100%;
    padding: 10px;
    background-color: #2c3e50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    margin-top: 10px;
  }
  
  button:hover {
    background-color: #1a2530;
  }
  
  button:disabled {
    background-color: #cccccc;
    cursor: not-allowed;
  }
  
  .error-message {
    color: red;
    font-size: 0.85rem;
    margin-top: 5px;
  }
  
  .actions {
    margin-top: 15px;
    text-align: center;
  }
  
  a {
    color: #2c3e50;
    text-decoration: none;
  }
  
  a:hover {
    text-decoration: underline;
  }
  </style>

// C:\thangs\NODE_JS\blog-system_backup\blog-system\frontend\src\components\auth\RegisterForm.vue
<template>
  <div class="register-form">
    <!-- Title changes based on context (handled by parent view) -->
    <h2>{{ isAdminRegistration ? 'Register New Admin' : 'Create an Account' }}</h2>
    <form @submit.prevent="handleSubmit">
      <div class="form-group">
        <label for="email">Email</label>
        <input
          id="email"
          v-model="email"
          type="email"
          placeholder="Enter email for the new user"
          required
        />
        <p v-if="errors.email" class="error-message">{{ errors.email }}</p>
      </div>

      <div class="form-group">
        <label for="password">Password</label>
        <input
          id="password"
          v-model="password"
          type="password"
          placeholder="Enter password (min 6 characters)"
          required
          minlength="6"
        />
        <p v-if="errors.password" class="error-message">{{ errors.password }}</p>
      </div>

      <div class="form-group">
        <label for="confirmPassword">Confirm Password</label>
        <input
          id="confirmPassword"
          v-model="confirmPassword"
          type="password"
          placeholder="Confirm password"
          required
        />
        <p v-if="passwordMismatch" class="error-message">Passwords do not match</p>
      </div>

      <p v-if="errorMessage" class="error-message">{{ errorMessage }}</p>
      <p v-if="successMessage" class="success-message">{{ successMessage }}</p>

      <!-- Admin Registration Checkbox REMOVED for admin context -->
      <!-- The logic now solely depends on isAdminRegistration computed property -->

      <button type="submit" :disabled="isSubmitting || passwordMismatch">
        {{ isSubmitting ? 'Registering...' : 'Register' }}
      </button>

      <!-- "Already have account?" link REMOVED for admin context -->
      <div class="actions" v-if="!isAdminRegistration">
        <router-link to="/login">Already have an account? Login</router-link>
      </div>
    </form>
  </div>
</template>

<script setup>
import { ref, computed } from 'vue';
import { useRouter } from 'vue-router';
import { useAuthStore } from '@/stores/auth';
import { useUsersStore } from '@/stores/users';
import { useRoute } from 'vue-router';


const router = useRouter();
const authStore = useAuthStore();
const usersStore = useUsersStore();
const route = useRoute();

// Form data
const email = ref('');
const password = ref('');
const confirmPassword = ref('');
const isSubmitting = ref(false);
const errorMessage = ref('');
const successMessage = ref('');
const errors = ref({
  email: '',
  password: ''
});
// const isAdmin = ref(false); // REMOVED - No longer needed as checkbox is gone for admin context
const isAdminRegistration = computed(() => route.path === '/admin/register');


// Computed properties
const passwordMismatch = computed(() => {
  return password.value && confirmPassword.value && password.value !== confirmPassword.value;
});

const handleSubmit = async () => {
  // Reset error messages
  errors.value = {
    email: '',
    password: ''
  };
  errorMessage.value = '';
  successMessage.value = '';

  // Client-side validation
  if (passwordMismatch.value) {
    return;
  }

  try {
    isSubmitting.value = true;

    if (isAdminRegistration.value) {
      // Admin registration (always true on this route now)
      await usersStore.registerAdmin({
        email: email.value,
        password: password.value,
        // role: 'admin' is typically set on the backend for this route
      });
       successMessage.value = 'Admin user registered successfully! Redirecting...';
       // Redirect after a delay
       setTimeout(() => {
         router.push('/admin/users'); // Redirect to user list or dashboard
       }, 2000);

    } else {
        // Regular user registration
      await authStore.register({
        email: email.value,
        password: password.value
      });
       // Show success message and redirect after a delay
      successMessage.value = 'Registration successful! Redirecting to login...';
      setTimeout(() => {
          router.push('/login');
       }, 2000);
    }


  } catch (error) {
    console.error('Registration error:', error);

    // Handle validation errors
    if (error.response && error.response.data && error.response.data.errors) {
      const validationErrors = error.response.data.errors;
      validationErrors.forEach(err => {
        if (err.path === 'email') {
          errors.value.email = err.msg;
        } else if (err.path === 'password') {
          errors.value.password = err.msg;
        }
      });
    } else if (error.response && error.response.status === 409) {
      // Email already registered
      errors.value.email = 'Email already registered';
    } else if (error.response && error.response.data && error.response.data.message) {
      // Handle general error message
      errorMessage.value = error.response.data.message;
    } else {
      // Fallback error message
      errorMessage.value = 'Registration failed. Please try again.';
    }
  } finally {
    isSubmitting.value = false;
  }
};
</script>

<style scoped>
.register-form {
  max-width: 400px;
  margin: 0 auto;
  padding: 20px;

}

.form-group {
  margin-bottom: 15px;
}

label {
  display: block;
  margin-bottom: 5px;
  font-weight: bold;
}

input {
  width: 100%;
  padding: 8px;
  border: 1px solid #ddd;
  border-radius: 4px;
}

button {
  width: 100%;
  padding: 10px;
  /* Using mint color for consistency, adjust if needed */
  background-color: #34d399; /* Example mint color */
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  margin-top: 10px;
}

button:hover {
  background-color: #10b981; /* Darker mint */
}

button:disabled {
  background-color: #cccccc;
  cursor: not-allowed;
}

.error-message {
  color: red;
  font-size: 0.85rem;
  margin-top: 5px;
}

.success-message {
  color: green;
  font-size: 0.85rem;
  margin-top: 5px;
}

.actions {
  margin-top: 15px;
  text-align: center;
}

a {
  color: #2c3e50;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}
</style>

// C:\thangs\NODE_JS\blog-system_backup\blog-system\frontend\src\components\comments\CommentForm.vue
<template>
  <div class="comment-form">
    <h4 class="text-md font-bold mb-2">{{ isEditing ? 'Edit Comment' : 'Add a Comment' }}</h4>
    <form @submit.prevent="handleSubmit">
      <div class="mb-4">
        <textarea
          v-model="commentData.content"
          rows="3"
          class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
          placeholder="Write your comment..."
          required
        ></textarea>
        <p v-if="errors.content" class="text-red-500 text-xs italic">{{ errors.content }}</p>
      </div>
       <p v-if="errorMessage" class="text-red-500 mt-2">{{ errorMessage }}</p>
      <div class="flex items-center justify-between">
        <button
          type="submit"
          :disabled="isSubmitting"
          class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
        >
          {{ isSubmitting ? (isEditing ? 'Updating...' : 'Submitting...') : (isEditing ? 'Update Comment' : 'Submit Comment')}}
        </button>
         <button type="button" @click="cancel" v-if="isEditing" class="bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
          Cancel
        </button>
      </div>
    </form>
  </div>
</template>

<script setup>
import { ref, reactive, onMounted, computed } from 'vue';
import { useCommentsStore } from '@/stores/comments';
import { useRoute } from 'vue-router';
import { useAuthStore } from '@/stores/auth'; // Import AuthStore

const props = defineProps({
    postId: {
        type: [String, Number], // Allow both string and number
        required: false, // Make it optional
    },
    comment: {
      type: Object,
      required: false, // Make it optional, for adding new comments
    },
    isEditing: {
      type: Boolean,
      default: false,
    },
});
const emit = defineEmits(['comment-added','comment-updated']);

const commentsStore = useCommentsStore();
const route = useRoute();
const authStore = useAuthStore(); // Use AuthStore

const isSubmitting = ref(false);
const commentData = reactive({
  content: '',
});
const errors = reactive({
    content: ''
});
const errorMessage = ref('');

onMounted(() => {
  if (props.isEditing && props.comment) {
    // Populate form with existing comment data for editing
    commentData.content = props.comment.content;
  }
});

const handleSubmit = async () => {
  isSubmitting.value = true;
  errorMessage.value = '';
  Object.keys(errors).forEach(key => errors[key] = '');
  try {
    if (props.isEditing) {
        //Edit comment mode
        const updatedComment = await commentsStore.updateComment(props.comment.id, commentData);
        emit('comment-updated', updatedComment); // Emit event
    }else {
        // Add new comment mode
        const postId = props.postId || route.params.id;
        if (!postId) {
            throw new Error('Post ID is required to add a comment.');
        }
        const newComment = await commentsStore.addComment(postId, commentData);
        emit('comment-added', newComment); // Emit event
        commentData.content = ''; // Clear the form
    }

  } catch (error) {
     console.error('Error submitting comment:', error);
     if (error.response && error.response.data && error.response.data.errors) {
        const validationErrors = error.response.data.errors;
        validationErrors.forEach(err => {
            if(errors.hasOwnProperty(err.path)){
              errors[err.path] = err.msg;
            }
        });
    }  else if (error.response && error.response.data && error.response.data.message) {
        // Handle general error message
        errorMessage.value = error.response.data.message;
    } else {
        // Fallback error message
        errorMessage.value = 'An error occurred. Please try again.';
    }
  } finally {
    isSubmitting.value = false;
  }
};

const cancel = () => {
    emit('cancel-edit');
};

</script>

// C:\thangs\NODE_JS\blog-system_backup\blog-system\frontend\src\components\layout\ContentContainer.vue
<!-- contentcontainer.vue -->
<template>
  <main class="container mx-auto px-4 py-8 flex-grow max-w-5xl">
    <div class="bg-white rounded-lg shadow-md p-6">
      <slot></slot>
    </div>
  </main>
</template>

// C:\thangs\NODE_JS\blog-system_backup\blog-system\frontend\src\components\layout\Footer.vue
// .\src\components\layout\Footer.vue
<template>
  <footer class="bg-mint-600 text-white p-6 mt-auto">
    <div class="container mx-auto max-w-5xl">
      <div class="flex flex-col md:flex-row justify-between items-center">
        <div class="mb-4 md:mb-0">
          <p class="font-medium">© {{ new Date().getFullYear() }} Blog System</p>
          <p class="text-sm text-mint-100">Sharing thoughts and ideas</p>
        </div>
        <div class="flex space-x-4">
          <a href="#" class="hover:text-mint-200 transition">About</a>
          <a href="#" class="hover:text-mint-200 transition">Contact</a>
          <a href="#" class="hover:text-mint-200 transition">Privacy</a>
        </div>
      </div>
    </div>
  </footer>
</template>

// C:\thangs\NODE_JS\blog-system_backup\blog-system\frontend\src\components\auth\LoginForm.vue
<template>
  <div class="login-form">
    <h2>User Login</h2>
    <form @submit.prevent="handleSubmit">
      <div class="form-group">
        <label for="email">Email</label>
        <input 
          id="email" 
          v-model="email" 
          type="email" 
          placeholder="Enter your email"
          required
        />
        <p v-if="errors.email" class="error-message">{{ errors.email }}</p>
      </div>
      
      <div class="form-group">
        <label for="password">Password</label>
        <input 
          id="password" 
          v-model="password" 
          type="password" 
          placeholder="Enter your password"
          required
        />
        <p v-if="errors.password" class="error-message">{{ errors.password }}</p>
      </div>
      
      <p v-if="errorMessage" class="error-message">{{ errorMessage }}</p>
      
      <button type="submit" :disabled="isSubmitting">
        {{ isSubmitting ? 'Logging in...' : 'Login' }}
      </button>
      
      <div class="actions">
        <router-link to="/register">Don't have an account? Register</router-link>
      </div>
    </form>
  </div>
</template>

<script setup>
import { ref } from 'vue';
import { useRouter } from 'vue-router';
import { useAuthStore } from '@/stores/auth';

const router = useRouter();
const authStore = useAuthStore();

// Form data
const email = ref('');
const password = ref('');
const isSubmitting = ref(false);
const errorMessage = ref('');
const errors = ref({
  email: '',
  password: ''
});

const handleSubmit = async () => {
  // Reset errors
  errors.value = {
    email: '',
    password: ''
  };
  errorMessage.value = '';
  
  try {
    isSubmitting.value = true;
    
    // Call the login action from auth store
    await authStore.login({
      email: email.value,
      password: password.value
    });
    
    // Redirect based on user role
    if (authStore.user && authStore.user.role === 'admin') {
      router.push('/admin/dashboard');
    } else {
      router.push('/');
    }
  } catch (error) {
    console.error('Login error:', error);
    
    // Handle validation errors
    if (error.response && error.response.data && error.response.data.errors) {
      const validationErrors = error.response.data.errors;
      validationErrors.forEach(err => {
        if (err.path === 'email') {
          errors.value.email = err.msg;
        } else if (err.path === 'password') {
          errors.value.password = err.msg;
        }
      });
    } else if (error.response && error.response.data && error.response.data.message) {
      // Handle general error message
      errorMessage.value = error.response.data.message;
    } else {
      // Fallback error message
      errorMessage.value = 'Login failed. Please try again.';
    }
  } finally {
    isSubmitting.value = false;
  }
};
</script>

<style scoped>
.login-form {
  max-width: 400px;
  margin: 0 auto;
  padding: 20px;
}

.form-group {
  margin-bottom: 15px;
}

label {
  display: block;
  margin-bottom: 5px;
  font-weight: bold;
}

input {
  width: 100%;
  padding: 8px;
  border: 1px solid #ddd;
  border-radius: 4px;
}

button {
  width: 100%;
  padding: 10px;
  background-color: #4CAF50;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  margin-top: 10px;
}

button:hover {
  background-color: #45a049;
}

button:disabled {
  background-color: #cccccc;
  cursor: not-allowed;
}

.error-message {
  color: red;
  font-size: 0.85rem;
  margin-top: 5px;
}

.actions {
  margin-top: 15px;
  text-align: center;
}

a {
  color: #2c3e50;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}
</style>

// C:\thangs\NODE_JS\blog-system_backup\blog-system\frontend\src\components\comments\CommentItem.vue
<template>
  <div class="comment-item flex items-start space-x-3 py-4 border-b border-gray-100 last:border-b-0">
    <!-- Avatar Column -->
    <div class="flex-shrink-0">
      <img
        v-if="comment.user && fullAvatarUrl"
        :src="fullAvatarUrl"
        :alt="comment.user.profile?.name || 'User Avatar'"
        class="w-10 h-10 rounded-full object-cover bg-gray-200"
        @error="onAvatarError"
      />
      <!-- Placeholder for users without avatar or guest users -->
      <div v-else class="w-10 h-10 rounded-full bg-gray-300 flex items-center justify-center text-gray-500 font-semibold">
        <span v-if="comment.user?.profile?.name">{{ comment.user.profile.name[0].toUpperCase() }}</span>
        <svg v-else xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
           <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
        </svg>
      </div>
    </div>

    <!-- Comment Content Column -->
    <div class="flex-grow">
       <!-- Comment Header: Name and Date -->
      <div class="comment-header flex items-center mb-1 text-sm">
        <span class="font-semibold mr-2 text-gray-800">
          {{ comment.user?.profile?.name || 'Guest User' }}
        </span>
        <span class="text-gray-500">{{ formattedDate }}</span>
      </div>

      <!-- Comment Body -->
       <div v-if="isEditing" class="mt-2">
         <CommentForm
           :comment="comment"
           :isEditing="true"
           @comment-updated="handleCommentUpdated"
           @cancel-edit="cancelEditing"
          />
       </div>
      <p v-else class="comment-content text-gray-700 text-sm leading-relaxed">
        {{ comment.content }}
      </p>

      <!-- Actions (Edit/Delete) -->
      <div class="actions mt-2 space-x-3" v-if="canEditOrDelete && !isEditing">
          <button @click="startEditing" class="text-xs text-blue-600 hover:underline">Edit</button>
          <button @click="handleDelete" class="text-xs text-red-600 hover:underline">Delete</button>
      </div>
      <p v-if="deleteError" class="text-xs text-red-500 mt-1">{{ deleteError }}</p>
    </div>
  </div>
</template>

<script setup>
import { computed, ref } from 'vue';
import { useAuthStore } from '@/stores/auth';
import { useCommentsStore } from '@/stores/comments';
import CommentForm from './CommentForm.vue'; // Assuming CommentForm is in the same directory

// Define base URL - Make sure this is accessible, might need to import from a config file
const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:3000';

const props = defineProps({
  comment: {
    type: Object,
    required: true,
  },
});

const emit = defineEmits(['comment-deleted', 'comment-updated']);

const authStore = useAuthStore();
const commentsStore = useCommentsStore();
const isEditing = ref(false);
const avatarLoadError = ref(false); // Track avatar loading errors
const deleteError = ref(''); // Track delete errors

// Construct full avatar URL
const fullAvatarUrl = computed(() => {
  const avatarPath = props.comment.user?.profile?.avatar;
  if (!avatarPath) return null; // No avatar set

  if (avatarPath.startsWith('http://') || avatarPath.startsWith('https://')) {
    return avatarPath; // Already absolute
  }
  // Prepend base URL if relative
  return `${API_BASE_URL}${avatarPath}`;
});

// Format date
const formattedDate = computed(() => {
  if (!props.comment.created_at) return '';
  try {
      // More robust date formatting
      return new Date(props.comment.created_at).toLocaleString(undefined, {
          year: 'numeric', month: 'short', day: 'numeric', hour: 'numeric', minute: '2-digit'
      });
  } catch (e) {
      console.error("Error formatting date:", e);
      return 'Invalid Date';
  }
});

// Handle avatar image loading error
const onAvatarError = () => {
  console.warn(`Failed to load avatar: ${fullAvatarUrl.value}`);
  avatarLoadError.value = true; // You could use this to show a different placeholder
  // For simplicity, we'll just let the existing placeholder logic handle it via v-else
};

// Determine if the current user/guest can edit or delete
const canEditOrDelete = computed(() => {
  // Admin can always edit/delete
  if (authStore.isAdmin) {
    return true;
  }
  // Logged-in user can edit/delete their own comments
  if (authStore.isAuthenticated && props.comment.user_id === authStore.user?.id) {
    return true;
  }
  // Add logic for guest edits/deletes if implemented (usually based on visitor_id and time limit)
  // Example (Needs backend support):
  // if (!props.comment.user_id && props.comment.visitor_id === localStorage.getItem('guestId') && /* check time limit */) {
  //   return true;
  // }
  return false;
});

const handleDelete = async () => {
  deleteError.value = ''; // Clear previous error
  if (confirm('Are you sure you want to delete this comment?')) {
    try {
      await commentsStore.deleteComment(props.comment.id);
      emit('comment-deleted', props.comment.id); // Notify parent
    } catch (error) {
      console.error('Error deleting comment', error);
      deleteError.value = error.response?.data?.message || 'Failed to delete comment.';
    }
  }
};

const startEditing = () => {
  isEditing.value = true;
};

const cancelEditing = () => {
    isEditing.value = false;
};

const handleCommentUpdated = (updatedCommentData) => {
    // Note: updatedCommentData might just be the { content: '...' } if the API only returns that on update.
    // The parent list usually refetches to get the full updated object including potentially edited timestamp.
    isEditing.value = false;
    // Emit the ID or the partial data, parent will likely refetch anyway
    emit('comment-updated', { id: props.comment.id, ...updatedCommentData });
};
</script>

<style scoped>
/* Add minor styles if needed, Tailwind handles most */
.comment-item:last-child {
  border-bottom: none;
}
</style>

// C:\thangs\NODE_JS\blog-system_backup\blog-system\frontend\src\components\comments\CommentList.vue
// C:\thangs\NODE_JS\blog-system_backup\blog-system\frontend\src\components\comments\CommentList.vue
<template>
  <div class="comment-list">
    <!-- REMOVED: <h3 class="text-lg font-bold mb-3">Comments ({{ totalComments }})</h3> -->

    <div v-if="loading" class="text-center py-4 text-gray-500">Loading comments...</div>
    <div v-else-if="error" class="text-center py-4 text-red-500">Error loading comments.</div>
    <div v-else-if="comments.length === 0" class="text-center py-4 text-gray-500">No comments yet. Be the first!</div>
    <div v-else class="space-y-4"> 
      <CommentItem
        v-for="comment in comments"
        :key="comment.id"
        :comment="comment"
        @comment-deleted="handleCommentDeleted"
        @comment-updated="handleCommentUpdated"
      />
       <!-- Pagination -->
       <div class="pagination mt-6 flex justify-center items-center space-x-2" v-if="totalPages > 1">
          <button
            @click="loadPage(currentPage - 1)"
            :disabled="currentPage === 1"
            class="px-3 py-1 rounded bg-gray-200 hover:bg-gray-300 disabled:bg-gray-100 disabled:text-gray-400 disabled:cursor-not-allowed transition text-sm"
          >
            « Prev
          </button>
          <span class="text-gray-600 text-sm">
            Page {{ currentPage }} of {{ totalPages }}
          </span>
          <button
            @click="loadPage(currentPage + 1)"
            :disabled="currentPage === totalPages"
            class="px-3 py-1 rounded bg-gray-200 hover:bg-gray-300 disabled:bg-gray-100 disabled:text-gray-400 disabled:cursor-not-allowed transition text-sm"
          >
            Next »
          </button>
       </div>
    </div>
  </div>
</template>

<script setup>
import { computed, watch } from 'vue';
import CommentItem from './CommentItem.vue';
import { useCommentsStore } from '@/stores/comments';

const props = defineProps({
  postId: {
    type: [String, Number],
    required: true,
  },
});

const emit = defineEmits(['comments-loaded']); // Optional: emit when comments are loaded/updated

const commentsStore = useCommentsStore();
const comments = computed(() => commentsStore.comments);
const loading = computed(() => commentsStore.loading);
const error = computed(() => commentsStore.error); // Expose error state
const currentPage = computed(() => commentsStore.currentPage);
const totalPages = computed(() => commentsStore.totalPages);
// totalComments is no longer directly used in the template, but might be useful elsewhere
// const totalComments = computed(() => commentsStore.totalComments);

const loadPage = async (page) => {
    if (page >= 1 && page <= totalPages.value && page !== currentPage.value) {
        try {
          await commentsStore.fetchComments(props.postId, page);
          emit('comments-loaded'); // Emit after successful load
        } catch (err) {
          console.error("Failed to load comments page:", err);
        }
    }
};

// Fetch comments when the postId changes or component mounts
watch(() => props.postId, async (newPostId) => {
  if (newPostId) {
    try {
      await commentsStore.fetchComments(newPostId, 1); // Reset to page 1
      emit('comments-loaded'); // Emit after initial load
    } catch (err) {
       console.error("Failed to load initial comments:", err);
    }
  }
}, { immediate: true }); // Use immediate: true to run on initial load

// Handler for when a comment is deleted by CommentItem
const handleCommentDeleted = async (deletedCommentId) => {
  console.log('Comment deleted event caught in list:', deletedCommentId);
  try {
      // Re-fetch comments for the current page to update the list and count
      await commentsStore.fetchComments(props.postId, currentPage.value);
      emit('comments-loaded'); // Emit after update
  } catch (err) {
     console.error("Failed to refetch comments after delete:", err);
  }
};

// Handler for when a comment is updated by CommentItem
const handleCommentUpdated = async (updatedComment) => {
  console.log('Comment updated event caught in list:', updatedComment);
   try {
     // Find and update the comment in the local list for instant feedback
     const index = comments.value.findIndex(c => c.id === updatedComment.id);
     if (index !== -1) {
        // Use spread syntax or Object.assign for reactivity
        comments.value[index] = { ...comments.value[index], ...updatedComment };
     }
     // Optionally, still refetch if backend might have changed other things
     // await commentsStore.fetchComments(props.postId, currentPage.value);
     emit('comments-loaded'); // Emit after update
   } catch (err) {
     console.error("Failed to update comment locally or refetch:", err);
   }
};

</script>

<style scoped>
/* Add any specific styling for the comment list container if needed */
</style>

// C:\thangs\NODE_JS\blog-system_backup\blog-system\frontend\src\services\commentService.js
import api from './api';

const commentService = {
  async getComments(postId, page = 1, limit = 10) {
    const response = await api.get(`/api/posts/${postId}/comments`, { // Correct endpoint
      params: { page, limit },
    });
    return response.data;
  },

  async addComment(postId, commentData) {
    const response = await api.post(`/api/posts/${postId}/comments`, commentData); // Correct endpoint
    return response.data;
  },

  async updateComment(commentId, commentData) {
    const response = await api.put(`/api/comments/${commentId}`, commentData); // Correct endpoint
    return response.data;
  },

  async deleteComment(commentId) {
    const response = await api.delete(`/api/comments/${commentId}`); // Correct endpoint
    return response.data;
  },
  async getComment(commentId) {
    const response = await api.get(`/api/comments/${commentId}`);
    return response.data;
  },
};

export default commentService;

// C:\thangs\NODE_JS\blog-system_backup\blog-system\frontend\src\router\index.js
import { createRouter, createWebHistory } from 'vue-router';
import { useAuthStore } from '@/stores/auth'; // Corrected import

import HomeView from '@/views/HomeView.vue';
import LoginView from '@/views/LoginView.vue';
import RegisterView from '@/views/RegisterView.vue';
import ProfileView from '@/views/ProfileView.vue';
import PostView from '@/views/PostView.vue';
import DashboardView from '@/views/admin/DashboardView.vue';
import UserManagementView from '@/views/admin/UserManagementView.vue';
import OwnerLoginView from '@/views/OwnerLoginView.vue';
import CreatePostView from '@/views/CreatePostView.vue'; // Import
import EditPostView from '@/views/EditPostView.vue';   // Import
import NotFoundView from '@/views/NotFoundView.vue';
import AdminRegisterView from '@/views/admin/AdminRegisterView.vue';
import AdminUserProfileView from '@/views/admin/AdminUserProfileView.vue';


const router = createRouter({
  history: createWebHistory(import.meta.env.BASE_URL),
  routes: [
    {
      path: '/',
      name: 'home',
      component: HomeView
    },
    {
      path: '/login',
      name: 'login',
      component: LoginView,
      meta: { requiresGuest: true }
    },
    {
      path: '/owner-login',
      name: 'ownerLogin',
      component: OwnerLoginView,
      meta: { requiresGuest: true }
    },
    {
      path: '/register',
      name: 'register',
      component: RegisterView,
      meta: { requiresGuest: true }
    },
    {
      path: '/profile',
      name: 'profile',
      component: ProfileView,
      meta: { requiresAuth: true }
    },
    {
      path: '/posts/:id',
      name: 'post',
      component: PostView,
       props: true,
    },
    {
        path: '/create-post',
        name: 'createPost',
        component: CreatePostView,
        meta: { requiresAuth: true, requiresAdmin: true }
    },
     {
        path: '/edit-post/:id',
        name: 'editPost',
        component: EditPostView,
        meta: { requiresAuth: true, requiresAdmin: true }
    },
    {
      path: '/admin/dashboard',
      name: 'adminDashboard',
      component: DashboardView,
      meta: { requiresAuth: true, requiresAdmin: true }
    },
    {
      path: '/admin/users',
      name: 'userManagement',
      component: UserManagementView,
      meta: { requiresAuth: true, requiresAdmin: true }
    },
     {
      path: '/:pathMatch(.*)*', // Catch-all route for 404s
      name: 'notFound',
      component: NotFoundView
    },
    {
        path: '/admin/register',
        name: 'adminRegister',
        component: AdminRegisterView,
        meta: { requiresAuth: true, requiresOwner: true } // Only owner can register admins
    },
     {
        path: '/admin/users/:userId/profile',
        name: 'adminUserProfile',
        component: AdminUserProfileView,
        meta: { requiresAuth: true, requiresAdmin: true },
        props: true
    },
  ]
});

// Navigation guard
router.beforeEach(async (to, from, next) => {
  const authStore = useAuthStore();

  if (authStore.isAuthenticated && !authStore.user) {
    try {
      await authStore.fetchUserProfile();
    } catch (error) {
      authStore.logout();
    }
  }

  if (to.meta.requiresGuest && authStore.isAuthenticated) {
    return next('/');
  }

  if (to.meta.requiresAuth && !authStore.isAuthenticated) {
    return next('/login');
  }

  if (to.meta.requiresAdmin && !authStore.isAdmin) {
    return next('/');
  }
  if (to.meta.requiresOwner && authStore.user.role !== 'owner') {
       return next('/'); // Redirect to a suitable page
    }

  next();
});

export default router;

// C:\thangs\NODE_JS\blog-system_backup\blog-system\frontend\src\services\authService.js
import api from './api';

const authService = {
  /**
   * Login as a regular user
   * @param {Object} credentials - User credentials
   * @param {string} credentials.email - User email
   * @param {string} credentials.password - User password
   * @returns {Promise<Object>} - Response with token
   */
  async login(credentials) {
    const response = await api.post('/api/auth/user-login', credentials); // Use correct endpoint
    return response.data;
  },

  /**
   * Login as the blog owner/admin
   * @param {Object} credentials - Owner credentials
   * @param {string} credentials.email - Owner email
   * @param {string} credentials.password - Owner password
   * @returns {Promise<Object>} - Response with token
   */
  async loginAsOwner(credentials) {
    const response = await api.post('/api/auth/login', credentials); // Use correct endpoint
    return response.data;
  },

  /**
   * Register a new user
   * @param {Object} userData - New user data
   * @param {string} userData.email - User email
   * @param {string} userData.password - User password
   * @returns {Promise<Object>} - Response with user data
   */
  async register(userData) {
    const response = await api.post('/api/register', userData); // Corrected endpoint
    return response.data;
  },

  /**
   * Get the current user's profile
   * @returns {Promise<Object>} - User profile data
   */
  async getUserProfile() {
    const response = await api.get('/api/profile'); // Corrected endpoint
    return response.data;
},
  /**
   * Update the current user's profile
   * @param {Object} profileData - Profile data to update
   * @param {string} [profileData.name] - User's name
   * @param {string} [profileData.avatar] - User's avatar URL
   * @param {string} [profileData.bio] - User's bio
   * @returns {Promise<Object>} - Updated profile data
   */
  async updateUserProfile(profileData) {
    const response = await api.patch('/api/profile', profileData); // Correct endpoint
    return response.data;
},

  /**
   * Delete the current user's account
   * @returns {Promise<Object>} - Response message
   */
  async deleteUserAccount() {
    const response = await api.delete('/api/profile'); // Correct endpoint
    return response.data;
}
};

export default authService;

// C:\thangs\NODE_JS\blog-system_backup\blog-system\frontend\src\utils\authHelpers.js


// C:\thangs\NODE_JS\blog-system_backup\blog-system\frontend\src\services\postService.js
import api from './api';

const postService = {
  async getAllPosts(params = {}) {
    const response = await api.get('/api/posts', { params }); // Correct endpoint
    return response.data;
  },

  async getPost(id) {
      const response = await api.get(`/api/posts/${id}`);
      return response.data;
  },

    async createPost(postData) {
    //No change for endpoint, but postData is now sending correctly
    const response = await api.post('/api/posts', postData);
    return response.data;
  },

    async updatePost(id, postData) {
    // No change for endpoint, but postData is now sending correctly
    const response = await api.put(`/api/posts/${id}`, postData);
    return response.data;
  },

  async deletePost(id) {
    const response = await api.delete(`/api/posts/${id}`); // Correct endpoint
    return response.data;
  },

  async searchPosts(query, page = 1, limit = 10) {
    const response = await api.get('/api/posts/search', { // Correct endpoint
      params: { q: query, page, limit }
    });
    return response.data;
  },

    async updateLike(postId, likeType) {
    const response = await api.put(`/api/posts/${postId}/likes`, { like_type: likeType });
    return response.data;
  },

  async deleteLike(postId) {
    const response = await api.delete(`/api/posts/${postId}/likes`);
    return response.data;
  },
};

export default postService;

// C:\thangs\NODE_JS\blog-system_backup\blog-system\frontend\src\components\post\PostItem.vue
<template>
  <div class="post-item bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow flex flex-col h-full">
    <!-- Image Container -->
    <div v-if="post.image_url" class="relative w-full h-48">
      <img
        :src="fullImageUrl"
        :alt="post.title"
        class="w-full h-full object-cover"
        @error="handleImageError"
      />
      <div v-if="imageError" class="absolute inset-0 bg-gray-100 flex items-center justify-center text-red-500">
        Image Error
      </div>
    </div>

    <div class="p-4 flex flex-col flex-grow">
      <!-- Title -->
      <div class="mb-2">
        <h2 class="text-lg font-semibold text-gray-800 hover:text-mint-500 transition-colors line-clamp-2">
          <router-link :to="{ name: 'post', params: { id: post.id } }">
            {{ post.title }}
          </router-link>
        </h2>
      </div>

      <!-- Date and Engagement Stats -->
      <div class="flex justify-between items-center mb-3">
        <!-- Date -->
        <span class="text-gray-600 text-sm flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
          </svg>
          {{ formatDate(post.created_at) }}
        </span>

        <!-- Engagement Stats -->
        <div class="flex space-x-4">
          <span class="text-gray-600 text-sm flex items-center" title="Likes">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
              <path stroke-linecap="round" stroke-linejoin="round" d="M14 10h4.764a2 2 0 011.789 2.894l-3.5 7A2 2 0 0115.263 21h-4.017c-.163 0-.326-.02-.485-.06L7 20m7-10V5a2 2 0 00-2-2h-.095c-.5 0-.905.405-.905.905 0 .714-.211 1.412-.608 2.006L7 11v9m7-10h-2M7 20H5a2 2 0 01-2-2v-6a2 2 0 012-2h2.5" />
            </svg>
            {{ post.likes }}
          </span>
          <span class="text-gray-600 text-sm flex items-center" title="Dislikes">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
              <path stroke-linecap="round" stroke-linejoin="round" d="M10 14H5.236a2 2 0 01-1.789-2.894l3.5-7A2 2 0 018.736 3h4.018a2 2 0 01.485.06l3.76.94m-7 10v5a2 2 0 002 2h.095c.5 0 .905-.405 .905-.905 0-.714.211-1.412.608-2.006L17 13V4m-7 10h2m5-10h2a2 2 0 012 2v6a2 2 0 01-2 2h-2.5" />
            </svg>
            {{ post.dislikes }}
          </span>
          <span class="text-gray-600 text-sm flex items-center" title="Comments">
             <!-- Corrected Comment Icon -->
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4 mr-1">
              <path stroke-linecap="round" stroke-linejoin="round" d="M2.25 12.76c0 1.6 1.123 2.994 2.707 3.227 1.087.16 2.185.283 3.293.369V21l4.076-4.076a1.526 1.526 0 0 1 1.037-.443 48.282 48.282 0 0 0 5.68-.494c1.584-.233 2.707-1.626 2.707-3.228V6.741c0-1.602-1.123-2.995-2.707-3.228A48.394 48.394 0 0 0 12 3c-2.392 0-4.744.175-7.043.513C3.373 3.746 2.25 5.14 2.25 6.741v6.018Z" />
            </svg>
            {{ post.comment_count }}
          </span>
        </div>
      </div>

      <!-- Truncated Content -->
      <div class="text-gray-700 text-sm mb-3 h-16 overflow-hidden">
        <p class="line-clamp-3">{{ truncateContent(post.content) }}</p>
      </div>

      <!-- Footer: Read More -->
      <div class="flex items-center mt-auto pt-2 border-t border-gray-100">
        <router-link
          :to="{ name: 'post', params: { id: post.id } }"
          class="text-mint-500 hover:text-mint-600 font-medium transition-colors duration-200"
        >
          Read More →
        </router-link>
      </div>
    </div>
  </div>
</template>

<script setup>
import { computed, ref } from 'vue';
const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:3000';
const props = defineProps({
  post: {
    type: Object,
    required: true,
  },
});

const fullImageUrl = computed(() => {
  if (!props.post.image_url) return '';
  if (props.post.image_url.startsWith('http')) {
    return props.post.image_url;
  }
  return `${API_BASE_URL}${props.post.image_url}`;
});

const formatDate = (dateString) => {
  const options = { year: 'numeric', month: 'short', day: 'numeric' };
  return new Date(dateString).toLocaleDateString(undefined, options);
};

const truncateContent = (content) => {
  if (!content) return '';
  return content.length > 120 ? content.substring(0, 120) + '...' : content;
};

const imageError = ref(false);
const handleImageError = () => {
  imageError.value = true;
}
</script>

<style scoped>
.line-clamp-2 {
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
}
.line-clamp-3 {
  display: -webkit-box;
  -webkit-line-clamp: 3;
  -webkit-box-orient: vertical;
  overflow: hidden;
}
</style>

// C:\thangs\NODE_JS\blog-system_backup\blog-system\frontend\src\components\layout\Header.vue
// C:\thangs\NODE_JS\blog-system_backup\blog-system\frontend\src\components\layout\Header.vue
<template>
  <header class="bg-mint-500 shadow-md">
    <div class="container mx-auto max-w-5xl px-4 py-4">
      <nav class="flex flex-col md:flex-row justify-between items-center gap-4">
        <!-- Left Side: Logo and Home Link -->
        <div class="flex items-center space-x-4">
          <router-link to="/" class="text-2xl font-bold text-white">Blog System</router-link>
          <router-link to="/" class="text-white hover:text-mint-100 transition hidden md:inline-block">Home</router-link>
        </div>

        <!-- Center: Search Bar -->
        <div class="w-full md:w-1/2 lg:w-1/3">
          <div class="relative">
            <input
              type="text"
              v-model="searchQuery"
              @keyup.enter="performSearch"
              placeholder="Search posts..."
              class="w-full px-4 py-2 rounded-md text-gray-700 bg-mint-50 focus:outline-none focus:ring-2 focus:ring-mint-300 placeholder-gray-500"
            />
            <button @click="performSearch" class="absolute right-0 top-0 h-full px-3 text-gray-500 hover:text-mint-600">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
            </button>
          </div>
        </div>

        <!-- Right Side: Auth Links/Dropdown -->
        <div class="flex items-center space-x-4">
          <router-link v-if="!isAuthenticated" to="/login" class="inline-block px-4 py-2 text-white border border-white rounded-md hover:bg-mint-100 hover:text-mint-600 transition">
            Sign In
          </router-link>
          <router-link v-if="!isAuthenticated" to="/register" class="inline-block px-4 py-2 bg-white text-mint-500 rounded-md hover:bg-mint-100 hover:text-mint-600 transition">
            Sign Up
          </router-link>
          <div v-else class="relative">
            <button
              @click="toggleDropdown"
              class="flex items-center space-x-1 text-white hover:text-mint-100 focus:outline-none"
            >
              <span>Account</span>
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
              </svg>
            </button>
            <div
              v-show="isDropdownOpen"
              class="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg py-1 z-10"
            >
              <router-link to="/profile" class="block px-4 py-2 text-gray-700 hover:bg-mint-100">Profile</router-link>
              <router-link v-if="isAdmin" to="/admin/dashboard" class="block px-4 py-2 text-gray-700 hover:bg-mint-100">Dashboard</router-link>
              <button @click="logout" class="block w-full text-left px-4 py-2 text-gray-700 hover:bg-mint-100">Sign Out</button>
            </div>
          </div>
        </div>
      </nav>
    </div>
  </header>
</template>

<script setup>
import { computed, ref, onMounted, onUnmounted } from 'vue';
import { useAuthStore } from '@/stores/auth';
import { useRouter } from 'vue-router';

const authStore = useAuthStore();
const router = useRouter();
const isDropdownOpen = ref(false);
const searchQuery = ref(''); // Added for search input

const isAuthenticated = computed(() => authStore.isAuthenticated);
const isAdmin = computed(() => authStore.isAdmin);

const toggleDropdown = () => {
  isDropdownOpen.value = !isDropdownOpen.value;
};

const closeDropdown = (e) => {
  if (!e.target.closest('.relative')) {
    isDropdownOpen.value = false;
  }
};

onMounted(() => {
  document.addEventListener('click', closeDropdown);
});

onUnmounted(() => {
  document.removeEventListener('click', closeDropdown);
});

const logout = async () => {
  await authStore.logout();
  isDropdownOpen.value = false;
  router.push('/login');
};

// Function to perform search
const performSearch = () => {
  if (searchQuery.value.trim()) {
    router.push({ name: 'home', query: { search: searchQuery.value } });
  } else {
     // If search is cleared, go to home without query
    router.push({ name: 'home' });
  }
  // Optional: Clear input after search?
  // searchQuery.value = '';
};
</script>

<style scoped>
/* Add any specific styles if needed */
</style>

// C:\thangs\NODE_JS\blog-system_backup\blog-system\frontend\src\services\api.js
import axios from 'axios';
import router from '@/router';
import { useAuthStore } from '@/stores/auth';

// Create axios instance with base URL from environment variables
const api = axios.create({
  baseURL: import.meta.env.VITE_API_URL || 'http://localhost:3000',  // Correct base URL
  // Don't set a default Content-Type here as it will interfere with FormData
  withCredentials: true, // IMPORTANT: Send cookies with requests
});

// Request interceptor to add authorization token and handle content type
api.interceptors.request.use(
  config => {
    const authStore = useAuthStore(); // Access auth store *inside* the interceptor
    const token = localStorage.getItem('token');
    if (token) {
      config.headers['Authorization'] = `Bearer ${token}`;
    }

    // Only set content type if not FormData
    // Let Axios automatically set the correct multipart/form-data with boundary for FormData
    if (!(config.data instanceof FormData)) {
      config.headers['Content-Type'] = 'application/json';
    }
      // Add guest ID to headers if not authenticated
    if (!authStore.isAuthenticated) {
        let guestId = localStorage.getItem('guestId');
        if (!guestId) {
            guestId = crypto.randomUUID(); // Use a more robust method to generate a UUID, using crypto
            localStorage.setItem('guestId', guestId);
        }
        config.headers['x-visitor-id'] = guestId;
    }

    return config;
  },
  error => {
    return Promise.reject(error);
  }
);

// Response interceptor to handle common errors
api.interceptors.response.use(
  response => {
    return response;
  },
    async error => { // Make this async
    const authStore = useAuthStore(); // Get auth store

    // Handle 401 Unauthorized errors (expired or invalid token)
    if (error.response && error.response.status === 401) {
      // Clear token from localStorage
      localStorage.removeItem('token');
      authStore.logout(); // Use authStore to clear user data

      // Redirect to login page if not already there
      if (router.currentRoute.value.path !== '/login') {
        router.push('/login');
      }
    }

    return Promise.reject(error);
  }
);

export default api;

// C:\thangs\NODE_JS\blog-system_backup\blog-system\frontend\src\components\post\PostForm.vue
<template>
  <div class="post-form">
    <h2 class="text-2xl font-bold mb-6 text-gray-800">{{ isEditing ? 'Edit Post' : 'Create Post' }}</h2>
    <form @submit.prevent="handleSubmit" class="space-y-6">
      <!-- Title -->
 <div>
        <label for="title" class="block text-sm font-medium text-gray-700 mb-2">Title</label>
        <input
          type="text"
          id="title"
          v-model="postData.title"
         class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-mint-500 transition"
          placeholder="Enter post title"
          required
        />
        <p v-if="errors.title" class="text-red-500 text-xs mt-1">{{ errors.title }}</p>
      </div>

      <!-- Content -->
      <div>
        <label for="content" class="block text-sm font-medium text-gray-700 mb-2">Content</label>
        <textarea
          id="content"
          v-model="postData.content"
          rows="6"
         class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-mint-500 transition"
          placeholder="Enter post content"
          required
        ></textarea>
        <p v-if="errors.content" class="text-red-500 text-xs mt-1">{{ errors.content }}</p>
      </div>

      <!-- Image (File Input) -->
       <div>
        <label for="image" class="block text-sm font-medium text-gray-700 mb-2">Image (Optional)</label>
        <!-- Preview existing image during editing -->
        <div v-if="isEditing && postData.image_url && !postData.image" class="mb-4">
          <img
            :src="postData.image_url"
            alt="Current Post Image"
            class="w-full max-h-64 object-cover rounded-md shadow-sm"
          >
          <p class="text-gray-500 text-sm mt-2">Upload a new image to replace the current one.</p>
        </div>
        <input
          type="file"
          id="image"
          @change="handleImageChange"
          accept=".jpg,.jpeg,.png,.gif"
          class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-mint-500 transition file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-mint-600 file:text-white file:hover:bg-mint-700"
        />
        <p v-if="errors.image" class="text-red-500 text-xs mt-1">{{ errors.image }}</p>
      </div>

      <!-- Status -->
      <div>
        <label for="status" class="block text-sm font-medium text-gray-700 mb-2">Status</label>
        <select
          id="status"
          v-model="postData.status"
        class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-mint-500 transition"
        >
          <option value="published">Published</option>
          <option value="draft">Draft</option>
        </select>
      </div>

      <!-- Submit/Cancel Buttons -->
      <div class="flex items-center justify-between">
        <button
          type="submit"
          :disabled="isSubmitting"
         class="px-6 py-2 bg-mint-600 text-white font-medium rounded-md hover:bg-mint-700 focus:outline-none focus:ring-2 focus:ring-mint-500 transition disabled:bg-gray-400 disabled:cursor-not-allowed"
        >
          {{ isSubmitting ? (isEditing ? 'Updating...' : 'Creating...') : (isEditing ? 'Update Post' : 'Create Post') }}
        </button>
        <button
          v-if="isEditing"
          type="button"
          @click="cancel"
          class="px-6 py-2 bg-gray-500 text-white font-medium rounded-md hover:bg-gray-600 transition"
        >
          Cancel
        </button>
      </div>
    </form>
    <p v-if="errorMessage" class="text-red-500 mt-4">{{ errorMessage }}</p>
  </div>
</template>

<script setup>
import { ref, onMounted, reactive, computed } from 'vue';
import { usePostsStore } from '@/stores/posts';
import { useRouter, useRoute } from 'vue-router';

const postsStore = usePostsStore();
const router = useRouter();
const route = useRoute();

const isEditing = computed(() => !!route.params.id);  // Determine if editing
const isSubmitting = ref(false);
const errorMessage = ref('');
const errors = reactive({
    title: '',
    content: '',
    image: ''
});

const postData = reactive({
  title: '',
  content: '',
  status: 'published',
  image: undefined, // Holds the File object
  image_url: ''
});


onMounted(async () => {
  if (isEditing.value) {
    try{
       await postsStore.fetchPost(route.params.id);
        // Populate form with existing post data
        Object.assign(postData, postsStore.currentPost); // Use Object.assign for reactivity
        postData.image = undefined; // Reset image, as it should be a File object

    } catch (error) {
       console.error("Failed to fetch post:", error);
      if (error.response && error.response.status === 404) {
        router.push('/404');
      } else {
        errorMessage.value = "Failed to load post. Please try again later.";
      }
    }

  }
});

const handleImageChange = (event) => {
  const file = event.target.files[0];
  if (file) {
     // Basic file type validation
    if (!file.type.startsWith('image/')) {
      errors.image = 'Please select an image file.';
      postData.image = null; // Clear invalid file
      return;
    }

    // File size validation (e.g., 5MB limit)
    const maxSize = 5 * 1024 * 1024; // 5MB in bytes
    if (file.size > maxSize) {
      errors.image = 'Image size should be less than 5MB.';
      postData.image = null;
      return;
    }
    errors.image = ''; // Clear previous error
    postData.image = file;  // Store the File object
  } else {
    postData.image = null;
  }
};

const handleSubmit = async () => {
  isSubmitting.value = true;
  errorMessage.value = '';
  Object.keys(errors).forEach(key => errors[key] = ''); // Clear previous errors

  try {
    const formData = new FormData();
    formData.append('title', postData.title);
    formData.append('content', postData.content);
    formData.append('status', postData.status);
    if (postData.image) {
      formData.append('image', postData.image);
    }

    if (isEditing.value) {
      await postsStore.updatePost(route.params.id, formData); // Pass FormData
    } else {
      await postsStore.createPost(formData); // Pass FormData
    }

    router.push('/'); // Redirect after success

  } catch (error) {
      console.error('Error submitting post:', error);
    if (error.response && error.response.data && error.response.data.errors) {
      const validationErrors = error.response.data.errors;
      validationErrors.forEach(err => {
        if(errors.hasOwnProperty(err.path)){
          errors[err.path] = err.msg;
        }
        if(err.path === 'image_url'){
            errors.image = err.msg;
        }
      });
     } else if (error.response && error.response.data && error.response.data.message) {
        // Handle general error message
        errorMessage.value = error.response.data.message;
      } else {
        // Fallback error message
        errorMessage.value = 'An error occurred. Please try again.';
      }
  } finally {
    isSubmitting.value = false;
  }
};

const cancel = () => {
    router.back();
};
</script>

// C:\thangs\NODE_JS\blog-system_backup\blog-system\frontend\src\components\post\PostList.vue
<template>
  <div class="post-list">
    <div v-if="loading" class="text-center py-10">
      <div class="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-mint-500 mx-auto"></div>
      <p class="mt-2 text-gray-600">Loading posts...</p>
    </div>
    <div v-else-if="posts.length === 0 && route.query.search" class="text-center py-10 text-gray-600">
        No posts found matching your search criteria.
    </div>
    <div v-else-if="posts.length === 0" class="text-center py-10 text-gray-600">
        No posts available yet. Be the first to create one!
        <span v-if="authStore.isAdmin">
            <router-link to="/create-post" class="text-mint-600 hover:underline"> Create Post</router-link>
        </span>
    </div>
    <div v-else>
      <!-- Grid Layout -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
       <div v-for="post in posts" :key="post.id" class="w-full">
        <PostItem  :post="post" />
       </div>
      </div>

      <!-- Pagination -->
      <div class="pagination mt-8 flex justify-center items-center space-x-2" v-if="totalPages > 1">
        <button
          @click="loadPage(currentPage - 1)"
          :disabled="currentPage === 1"
          class="px-4 py-2 rounded bg-gray-200 hover:bg-gray-300 disabled:bg-gray-100 disabled:text-gray-400 disabled:cursor-not-allowed transition text-sm"
        >
          « Previous
        </button>
        <span class="text-gray-700 text-sm">
          Page {{ currentPage }} of {{ totalPages }}
        </span>
        <button
          @click="loadPage(currentPage + 1)"
          :disabled="currentPage === totalPages"
          class="px-4 py-2 rounded bg-gray-200 hover:bg-gray-300 disabled:bg-gray-100 disabled:text-gray-400 disabled:cursor-not-allowed transition text-sm"
        >
          Next »
        </button>
      </div>
    </div>
  </div>
</template>

<script setup>
import { computed, onMounted, ref, watch } from 'vue';
import PostItem from './PostItem.vue';
import { usePostsStore } from '@/stores/posts';
import { useAuthStore } from '@/stores/auth'; // Import auth store for create post link
import { useRoute } from 'vue-router';

const postsStore = usePostsStore();
const authStore = useAuthStore(); // Initialize auth store
const route = useRoute();

const posts = computed(() => postsStore.posts);
const loading = computed(() => postsStore.loading);
const currentPage = computed(() => postsStore.currentPage);
const totalPages = computed(() => postsStore.totalPages);


const loadPostsForCurrentRoute = (page = 1) => {
  const search = route.query.search || ''; // Get search term from route query
  postsStore.fetchPosts({ page, search });
};

const loadPage = (page) => {
    loadPostsForCurrentRoute(page);
};

// Watch for changes in the route's query parameters (specifically 'search')
watch(
    () => route.query.search,
    (newSearchTerm, oldSearchTerm) => {
        // Fetch posts only if the search term actually changes
        // Prevents re-fetching if other query params change
        if (newSearchTerm !== oldSearchTerm) {
            loadPostsForCurrentRoute(1); // Reset to page 1 on new search
        }
    },
    { deep: true } // Use deep watch if query might be complex, though likely not needed for just 'search'
);

onMounted(() => {
  loadPostsForCurrentRoute(1); // Load initial posts based on current route (including search)
});
</script>

// C:\thangs\NODE_JS\blog-system_backup\blog-system\frontend\src\services\userService.js
import api from './api';

const userService = {
  async getUserProfile() {
    const response = await api.get('/api/profile'); // Correct endpoint
    return response.data;
  },

  async updateUserProfile(profileData) {
      //No change needed
    const response = await api.patch('/api/profile', profileData); // Correct endpoint
    return response.data;
  },
  async deleteUserAccount() {
        const response = await api.delete('/api/profile'); // Correct endpoint
        return response.data;
  },
    //Admin functions
   async getAllUsers() {
        const response = await api.get('/api/admin/users');
        return response.data;
    },

    async getAnyUserProfile(userId) {
        const response = await api.get(`/api/users/${userId}/profile`);
        return response.data;
    },

    async updateAnyUserProfile(userId, profileData) {
        const response = await api.put(`/api/admin/users/${userId}/profile`, profileData);
        return response.data;
    },

    async deleteAnyUser(userId) {
        const response = await api.delete(`/api/admin/users/${userId}/profile`);
        return response.data;
    },
    async registerAdmin(userData) {
        const response = await api.post('/api/admin/register', userData);
        return response.data;
    },
};

export default userService;

// C:\thangs\NODE_JS\blog-system_backup\blog-system\frontend\src\views\CreatePostView.vue
<template>
  <div class="create-post-view">
   <div class="bg-gradient-to-r from-mint-500 to-teal-600 text-white p-8 rounded-lg mb-8">
      <h1 class="text-3xl font-bold">Create New Post</h1>
     <p class="text-mint-100">Share your thoughts with the world</p>
    </div>

    <div class="bg-white rounded-lg shadow-md p-6">
      <PostForm @post-created="$router.push({ name: 'home' })" />
    </div>
  </div>
</template>

<script setup>
import PostForm from '@/components/post/PostForm.vue';
import { useRouter } from 'vue-router';

const router = useRouter();

</script>

// C:\thangs\NODE_JS\blog-system_backup\blog-system\frontend\src\stores\users.js
import { defineStore } from 'pinia';
import { ref, computed } from 'vue';
import userService from '@/services/userService';

export const useUsersStore = defineStore('users', () => {
  const userProfile = ref(null);
  const loading = ref(false);
  const error = ref(null);
  const allUsers = ref([]);

  const fetchUserProfile = async () => {
    loading.value = true;
    error.value = null;
    try {
      const response = await userService.getUserProfile();
      userProfile.value = response.data;
    } catch (err) {
      error.value = err;
      // Don't automatically log out here.  The authStore handles that.
    } finally {
      loading.value = false;
    }
  };

  const updateUserProfile = async (profileData) => {
    loading.value = true;
    error.value = null;
    try {
      const response = await userService.updateUserProfile(profileData);
      userProfile.value.UserProfile = response.data; // Update the store
       return response;
    } catch (err) {
      error.value = err;
      throw err;
    } finally {
      loading.value = false;
    }
  };

  //Admin functions
  const fetchAllUsers = async() => {
    loading.value = true;
    error.value = null;
    try {
      const response = await userService.getAllUsers();
      allUsers.value = response.data.users;
    } catch (error) {
      error.value = error;
    } finally {
      loading.value = false;
    }
  };

  const fetchAnyUserProfile = async (userId) => {
        loading.value = true;
        error.value = null;
        try {
            const response = await userService.getAnyUserProfile(userId);
            return response.data; // Return the data, don't store in this store
        } catch (err) {
            error.value = err;
            throw err; // Re-throw for component to handle
        } finally {
            loading.value = false;
        }
    };

    const updateAnyUserProfile = async (userId, profileData) => {
        loading.value = true;
        error.value = null;
        try {
            const response = await userService.updateAnyUserProfile(userId, profileData);
            return response.data;
        } catch (err) {
            error.value = err;
            throw err; // Re-throw for component handling
        } finally {
            loading.value = false;
        }
    };

    const deleteAnyUser = async (userId) => {
        loading.value = true;
        error.value = null;
        try {
            await userService.deleteAnyUser(userId);
            // Optionally, refresh user list (if you have a list)
        } catch (err) {
            error.value = err;
        } finally {
            loading.value = false;
        }
    };
    const registerAdmin = async (userData) => {
        loading.value = true;
        error.value = null;
        try {
            const response = await userService.registerAdmin(userData);
            return response.data; // Return response
        } catch (err) {
            error.value = err;
            throw err; // Re-throw for component
        } finally {
            loading.value = false;
        }
    };


  return {
    userProfile,
    loading,
    error,
    allUsers,
    fetchUserProfile,
    updateUserProfile,
    fetchAllUsers,
    fetchAnyUserProfile,
    updateAnyUserProfile,
    deleteAnyUser,
    registerAdmin
  };
});

// C:\thangs\NODE_JS\blog-system_backup\blog-system\frontend\src\stores\comments.js
import { defineStore } from 'pinia';
import { ref, computed } from 'vue';
import commentService from '@/services/commentService';
import { useAuthStore } from './auth';

export const useCommentsStore = defineStore('comments', () => {
  const comments = ref([]);
  const loading = ref(false);
  const error = ref(null);
  const currentPage = ref(1);
  const totalPages = ref(1);
  const totalComments = ref(0);
  const currentComment = ref(null);

  const fetchComments = async (postId, page = 1, limit = 10) => {
    loading.value = true;
    error.value = null;
    try {
      const response = await commentService.getComments(postId, page, limit);
      comments.value = response.data.comments;
      currentPage.value = response.data.currentPage;
      totalPages.value = response.data.totalPages;
      totalComments.value = response.data.totalComments;
    } catch (err) {
      error.value = err;
    } finally {
      loading.value = false;
    }
  };

const addComment = async (postId, commentData) => {
  const authStore = useAuthStore();
  loading.value = true;
  error.value = null;
  try {
    // Optimistic update: Add the comment immediately to the local state
    const tempId = Date.now(); // Generate a temporary ID
    const newComment = {
      id: tempId,
      post_id: postId,
      content: commentData.content,
      created_at: new Date().toISOString(), // Use current time
      user_id: authStore.user ? authStore.user.id : null, // Get user ID
      visitor_id:  !authStore.user ? localStorage.getItem('guestId') : null, // Placeholder, adjust as needed
      // ... any other fields you need ...
    };

    comments.value.unshift(newComment); // Add to the beginning of the array
    totalComments.value += 1;  // Update total
    const response = await commentService.addComment(postId, commentData);
    // Replace the temporary comment with the one from the server
    const index = comments.value.findIndex(c => c.id === tempId);
    if (index !== -1) {
        comments.value[index] = response.data;
    }
    return response.data;
  } catch (err) {
      // Rollback: Remove the optimistically added comment
      const index = comments.value.findIndex(c => c.id === tempId);
      if (index !== -1) {
          comments.value.splice(index, 1);
          totalComments.value -= 1;
      }
    error.value = err;
    throw err; // Re-throw for component handling
  } finally {
    loading.value = false;
  }
};

  const updateComment = async (commentId, commentData) => {
    loading.value = true;
    error.value = null;
    try {
        const response = await commentService.updateComment(commentId, commentData);
        //No need to fetch comment
        return response.data
    } catch (error) {
        error.value = error;
        throw error;
    } finally {
        loading.value = false;
    }
  };

  const deleteComment = async (commentId) => {
    loading.value = true;
    error.value = null;
    try {
      await commentService.deleteComment(commentId);
      //No need to fetch comment

    } catch (err) {
      error.value = err;
    } finally {
      loading.value = false;
    }
  };

  const fetchComment = async(commentId) => {
    loading.value = true;
    error.value = null;
    try {
      const response = await commentService.getComment(commentId);
      currentComment.value = response.data;

    }catch (err) {
      error.value = err
    } finally {
      loading.value = false
    }
  };

  return {
    comments,
    loading,
    error,
    currentPage,
    totalPages,
    totalComments,
    currentComment,
    fetchComments,
    addComment,
    updateComment,
    deleteComment,
    fetchComment
  };
});

// C:\thangs\NODE_JS\blog-system_backup\blog-system\frontend\src\views\EditPostView.vue
<template>
  <div class="edit-post-view">
   <div class="bg-gradient-to-r from-mint-500 to-teal-600 text-white p-8 rounded-lg mb-8">
      <h1 class="text-3xl font-bold">Edit Post</h1>
     <p class="text-mint-100">Update your content</p>
    </div>

    <div class="bg-white rounded-lg shadow-md p-6">
      <PostForm />
    </div>
  </div>
</template>

<script setup>
import PostForm from '@/components/post/PostForm.vue';
</script>

// C:\thangs\NODE_JS\blog-system_backup\blog-system\frontend\src\views\HomeView.vue
// .\src\views\HomeView.vue
<template>
  <div class="py-8">
    <!-- No more hero section -->

    <h1 class="text-3xl font-bold mb-6 text-gray-800 border-b pb-2">Latest Posts</h1>

    <PostList />

    <!-- Admin actions (styled differently) -->
    <div v-if="authStore.isAuthenticated && authStore.isAdmin" class="mt-12">
      <h2 class="text-xl font-semibold mb-4 text-gray-700">Admin Actions</h2>
      <div class="flex space-x-4">
        <router-link
          to="/create-post"
          class="bg-mint-500 hover:bg-mint-600 text-white font-medium py-2 px-4 rounded-md transition flex items-center"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
          </svg>
          Create New Post
        </router-link>
        <router-link
          to="/admin/dashboard"
          class="bg-gray-200 hover:bg-gray-300 text-gray-700 font-medium py-2 px-4 rounded-md transition flex items-center"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h7" />
          </svg>
          Admin Dashboard
        </router-link>
      </div>
    </div>
  </div>
</template>

<script setup>
import { onMounted } from 'vue';
import PostList from '@/components/post/PostList.vue'
import { useAuthStore } from '@/stores/auth';

const authStore = useAuthStore();
</script>

// C:\thangs\NODE_JS\blog-system_backup\blog-system\frontend\src\views\RegisterView.vue
<template>
  <div class="register-page py-12 bg-gray-50"> <!-- Add background to the page if needed, matching main bg -->
    <div class="max-w-md mx-auto"> <!-- Container to center the form -->
      <div class="bg-mint-500 p-6 rounded-t-lg shadow-md text-center"> <!-- Mint banner, rounded top -->
        <h1 class="text-2xl font-bold text-white">Create Account</h1>
        <p class="text-mint-100">Join our community today</p>
      </div>
      <div class="bg-white rounded-b-lg shadow-md p-6"> <!-- White background for form content, rounded bottom -->
        <RegisterForm />
      </div>
    </div>
  </div>
</template>

<script setup>
import RegisterForm from '@/components/auth/RegisterForm.vue';
</script>

// C:\thangs\NODE_JS\blog-system_backup\blog-system\frontend\src\views\NotFoundView.vue
<template>
  <div class="not-found flex flex-col items-center justify-center min-h-screen text-center px-4">
    <div class="max-w-md">
     <div class="mb-8 text-mint-500">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-24 w-24 mx-auto" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
      </div>

      <h1 class="text-6xl font-bold text-gray-800 mb-4">404</h1>
      <h2 class="text-2xl font-semibold text-gray-700 mb-6">Page Not Found</h2>

      <p class="text-lg text-gray-600 mb-8">
        Sorry, we couldn't find the page you're looking for. It might have been moved or deleted.
      </p>

      <div class="flex flex-col sm:flex-row space-y-4 sm:space-y-0 sm:space-x-4 justify-center">
        <router-link
          to="/"
         class="px-5 py-3 bg-mint-600 text-white rounded-md hover:bg-mint-700 transition flex items-center justify-center"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
          </svg>
          Back to Home
        </router-link>

        <button
          @click="goBack"
          class="px-5 py-3 bg-white border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 transition flex items-center justify-center"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
          </svg>
          Go Back
        </button>
      </div>
    </div>
  </div>
</template>

<script setup>
import { useRouter } from 'vue-router';

const router = useRouter();

const goBack = () => {
  router.go(-1);
};
</script>

// C:\thangs\NODE_JS\blog-system_backup\blog-system\frontend\src\stores\posts.js
import { defineStore } from 'pinia';
import { ref, computed } from 'vue';
import postService from '@/services/postService';
import { useAuthStore } from './auth'; // Import useAuthStore

export const usePostsStore = defineStore('posts', () => {
  const posts = ref([]);
  const currentPost = ref(null);
  const loading = ref(false);
  const error = ref(null);
  const currentPage = ref(1);
  const totalPages = ref(1);
  const totalPosts = ref(0);


  const fetchPosts = async (params = {}) => {
    loading.value = true;
    error.value = null;
    try {
      const response = await postService.getAllPosts(params);
      posts.value = response.data.posts;
      currentPage.value = response.data.currentPage;
      totalPages.value = response.data.totalPages;
      totalPosts.value = response.data.totalPosts;

    } catch (err) {
      error.value = err;
    } finally {
      loading.value = false;
    }
  }

  const fetchPost = async (id) => {
    loading.value = true;
    error.value = null;
    currentPost.value = null; // Reset currentPost
    try {
      const response = await postService.getPost(id);
      currentPost.value = response.data;

      // Check if the user has liked/disliked the post and set userLikeStatus
      if (response.data && response.data.userLikeStatus) {
            currentPost.value.userLikeStatus = response.data.userLikeStatus;
        } else {
            currentPost.value.userLikeStatus = null; // or 'none' if you prefer
        }


    } catch (err) {
      error.value = err;
       throw err; // Re-throw the error for the component to handle
    } finally {
      loading.value = false;
    }
  };

  const createPost = async (postData) => {
    const authStore = useAuthStore(); // Access authStore
      if (!authStore.isAuthenticated) {
        throw new Error('User must be logged in to create a post.');
      }
    loading.value = true;
    error.value = null;
    try {
      const response = await postService.createPost(postData);
      //  fetchPosts(); // Refresh the list after creating. Consider pagination.
       return response;
    } catch (err) {
      error.value = err;
      throw err; // Important for form handling
    } finally {
      loading.value = false;
    }
  };

  const updatePost = async (id, postData) => {
      const authStore = useAuthStore(); // Access authStore
      if (!authStore.isAuthenticated) {
        throw new Error('User must be logged in to update a post.');
      }
    loading.value = true;
    error.value = null;
    try {
      const response = await postService.updatePost(id, postData);
      //  fetchPosts();  // Refresh list.
       return response;
    } catch (err) {
      error.value = err;
       throw err; // Important for form handling
    } finally {
      loading.value = false;
    }
  };

  const deletePost = async (id) => {
      const authStore = useAuthStore(); // Access authStore
      if (!authStore.isAuthenticated || !authStore.isAdmin) {
           throw new Error('Only admin users can delete posts.');
        }
    loading.value = true;
    error.value = null;
    try {
      await postService.deletePost(id);
      fetchPosts(); // Refresh the list
    } catch (err) {
      error.value = err;
    } finally {
      loading.value = false;
    }
  };

  const searchPosts = async (query, page = 1, limit = 10) => {
    loading.value = true;
    error.value = null;
    try {
        const response = await postService.searchPosts(query, page, limit);
        posts.value = response.data.posts;
        currentPage.value = response.data.currentPage;
        totalPages.value = response.data.totalPages;
        totalPosts.value = response.data.totalPosts;
    } catch (err) {
        error.value = err;
    } finally {
        loading.value = false;
    }
};

  const updateLikeStatus = async(postId, likeType) => {
        const authStore = useAuthStore();
        // if (!authStore.isAuthenticated) { // Removed this, handeling guest users on the backend
        //     // Handle the case where user is not authenticated (guest user)
        //     // You might want to display a message or redirect to login
        //     console.log("User not authenticated. Cannot like/dislike.");
        //     return; // Or throw an error, depending on your needs
        // }

      try{
        const response = await postService.updateLike(postId, likeType);
        //Update currentPost like and dislike
        await fetchPost(postId);

      } catch (error) {
        console.error('Error updating like status:', error);
         throw error;
      }
  };

  const deleteLikeStatus = async (postId) => {
    const authStore = useAuthStore();
        // if (!authStore.isAuthenticated) { // Removed this
        //     console.log("User not authenticated. Cannot remove like/dislike.");
        //     return;
        // }
    try {
      const response = await postService.deleteLike(postId);
      //Update currentPost like and dislike
      await fetchPost(postId);

    } catch (error) {
        console.error('Error removing like:', error)
        throw error;
    }
  };

  return {
    posts,
    currentPost,
    loading,
    error,
    currentPage,
    totalPages,
    totalPosts,
    fetchPosts,
    fetchPost,
    createPost,
    updatePost,
    deletePost,
    searchPosts,
    updateLikeStatus,
    deleteLikeStatus
  };
});

// C:\thangs\NODE_JS\blog-system_backup\blog-system\frontend\src\stores\auth.js

import { defineStore } from 'pinia';
import { ref, computed } from 'vue';
import authService from '@/services/authService';

export const useAuthStore = defineStore('auth', () => {
  // State
  const token = ref(localStorage.getItem('token') || null);
  const user = ref(null);
  const loading = ref(false);
  const error = ref(null); // Add error ref

  // Getters (computed properties)
  const isAuthenticated = computed(() => !!token.value);
  const isAdmin = computed(() => user.value && (user.value.role === 'admin' || user.value.role === 'owner'));
  const isOwner = computed(() => user.value && user.value.role === 'owner');

  // Actions
  async function login(credentials) {
    loading.value = true;
    error.value = null; // Reset error
    try {
      const response = await authService.login(credentials);
      setAuthData(response.token);
      await fetchUserProfile();
      return response;
    } catch (err) {
      error.value = err; // Store error
      throw err; // Re-throw for component handling
    } finally {
      loading.value = false;
    }
  }

  async function loginAsOwner(credentials) {
    loading.value = true;
    error.value = null;
    try {
      const response = await authService.loginAsOwner(credentials);
      setAuthData(response.token);
      await fetchUserProfile();
      return response;
     } catch (err) {
      error.value = err; // Store error
      throw err; // Re-throw for component handling
    } finally {
      loading.value = false;
    }
  }

  async function register(userData) {
    loading.value = true;
    error.value = null;
    try {
      const response = await authService.register(userData);
      return response;
    } catch(err){
      error.value = err;
      throw err; //Re throw the error
    } finally {
      loading.value = false;
    }
  }

  async function logout() {
    // Clear auth data
    localStorage.removeItem('token');
    localStorage.removeItem('guestId'); // Also remove guestId
    token.value = null;
    user.value = null;
  }

  async function fetchUserProfile() {
    if (!token.value) return null;

    loading.value = true;
    error.value = null;
    try {
      const userData = await authService.getUserProfile();
      user.value = userData.data;
      return userData;
    } catch (err) {
      error.value = err; // Store error
      // If there's an error fetching the profile (like an expired token)
      // clear the auth data
      if (err.response && err.response.status === 401) {
        logout();
      }
      throw err; // Re-throw for component handling
    } finally {
      loading.value = false;
    }
  }

  async function deleteUserAccount() {
      loading.value = true;
      error.value = null;
      try {
        await authService.deleteUserAccount();
        // No need to manually clear auth data here, as the logout action will be called.
      } catch(err) {
        error.value = err;
        throw err
      }
      finally {
          loading.value = false;
      }
    }

  // Helper function to set auth data
  function setAuthData(newToken) {
    localStorage.setItem('token', newToken);
    token.value = newToken;
  }

  // Initialize: Try to fetch user data if token exists
  if (token.value) {
    fetchUserProfile().catch(() => logout());
  }

  return {
    // State
    token,
    user,
    loading,
    error, // Expose error

    // Getters
    isAuthenticated,
    isAdmin,
    isOwner,

    // Actions
    login,
    loginAsOwner,
    register,
    logout,
    fetchUserProfile,
    deleteUserAccount
  };
});

// C:\thangs\NODE_JS\blog-system_backup\blog-system\frontend\src\views\LoginView.vue
// C:\thangs\NODE_JS\blog-system_backup\blog-system\frontend\src\views\LoginView.vue
<template>
  <div class="login-page py-12 bg-gray-50">
    <div class="max-w-md mx-auto">
      <div class="bg-mint-500 p-6 rounded-t-lg shadow-md text-center">
        <!-- Make the h1 clickable for easter egg -->
        <h1
          class="text-2xl font-bold text-white cursor-pointer"
          @click="handleWelcomeClick"
        >
          Welcome Back
        </h1>
        <p class="text-mint-100">Sign in to access your account</p>
      </div>
      <div class="bg-white rounded-b-lg shadow-md p-6">
        <LoginForm />
      </div>
    </div>
  </div>
</template>

<script setup>
import LoginForm from '@/components/auth/LoginForm.vue';
import { ref } from 'vue';
import { useRouter } from 'vue-router';

const router = useRouter();
const welcomeClickCount = ref(0); // Initialize click counter

const handleWelcomeClick = () => {
  welcomeClickCount.value++; // Increment counter on each click
  if (welcomeClickCount.value >= 3) {
    router.push('/owner-login'); // Redirect to owner login after 3 clicks
  }
};
</script>

// C:\thangs\NODE_JS\blog-system_backup\blog-system\frontend\src\views\PostView.vue
<template>
  <div class="post-view">
    <div v-if="loading" class="flex justify-center py-16">
      <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500"></div>
    </div>

    <div v-else-if="error" class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6 rounded">
      <p class="font-medium">Error: {{ error.message }}</p>
    </div>

    <div v-else-if="post" class="post-details">
      <div class="mb-8">
        <!-- Image Display - UPDATED -->
        <div v-if="fullImageUrl" class="mb-6"> <!-- Use fullImageUrl in v-if -->
          <img
            :src="fullImageUrl"
            :alt="post.title"
            class="w-full max-h-[500px] object-cover rounded-lg shadow-lg transition-transform duration-300 hover:scale-[1.02]"
          >
        </div>
        
        <h1 class="text-4xl font-bold mb-4 text-gray-800">{{ post.title }}</h1>
        <div class="flex items-center text-gray-500 mb-6">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
          </svg>
          <span>{{ new Date(post.created_at).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' }) }}</span>
        </div>
      </div>

      <div class="bg-white rounded-lg shadow-md p-6 mb-8">
        <div class="prose max-w-none text-gray-800" v-html="post.content"></div>
      </div>

      <!-- Like/Dislike Section -->
      <div class="bg-gray-50 rounded-lg border border-gray-200 p-6 mb-8">
         <h2 class="text-xl font-semibold mb-4 text-gray-700">What did you think?</h2>
        <div class="flex items-center space-x-4">
          <button
            @click="handleLike('like')"
            class="flex items-center px-4 py-2 rounded-full transition"
            :class="{
              'bg-green-500 text-white hover:bg-green-600': post.userLikeStatus === 'like',
              'bg-gray-100 text-gray-700 hover:bg-gray-200': post.userLikeStatus !== 'like',
            }"
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 10h4.764a2 2 0 011.789 2.894l-3.5 7A2 2 0 0115.263 21h-4.017c-.163 0-.326-.02-.485-.06L7 20m7-10V5a2 2 0 00-2-2h-.095c-.5 0-.905.405-.905.905 0 .714-.211 1.412-.608 2.006L7 11v9m7-10h-2M7 20H5a2 2 0 01-2-2v-6a2 2 0 012-2h2.5" />
            </svg>
            <span>Like</span>
            <span class="ml-2 bg-white text-gray-700 rounded-full px-2 py-0.5 text-sm">{{ post.likes }}</span>
          </button>

          <button
            @click="handleLike('dislike')"
            class="flex items-center px-4 py-2 rounded-full transition"
            :class="{
              'bg-red-500 text-white hover:bg-red-600': post.userLikeStatus === 'dislike',
              'bg-gray-100 text-gray-700 hover:bg-gray-200': post.userLikeStatus !== 'dislike',
            }"
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14H5.236a2 2 0 01-1.789-2.894l3.5-7A2 2 0 018.736 3h4.018a2 2 0 01.485.06l3.76.94m-7 10v5a2 2 0 002 2h.095c.5 0 .905-.405.905-.905 0-.714.211-1.412.608-2.006L17 13V4m-7 10h2m5-10h2a2 2 0 012 2v6a2 2 0 01-2 2h-2.5" />
            </svg>
            <span>Dislike</span>
            <span class="ml-2 bg-white text-gray-700 rounded-full px-2 py-0.5 text-sm">{{ post.dislikes }}</span>
          </button>

          <button
            v-if="post.userLikeStatus"
            @click="handleRemoveLike"
            class="flex items-center px-4 py-2 rounded-full bg-yellow-100 text-yellow-700 hover:bg-yellow-200 transition"
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
            <span>Remove {{ post.userLikeStatus }}</span>
          </button>
        </div>
      </div>

      <!-- Admin Actions -->
      <div class="mb-8 flex justify-end" v-if="authStore.isAuthenticated && authStore.isAdmin">
        <div class="flex space-x-4">
          <router-link
            :to="{ name: 'editPost', params: { id: post.id }}"
            class="flex items-center px-4 py-2 bg-mint-600 text-white rounded-md hover:bg-mint-700 transition"
                      >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
            </svg>
            Edit Post
          </router-link>

          <button
            @click="deleteCurrentPost"
            class="flex items-center px-4 py-2 bg-white border border-red-500 text-red-500 rounded-md hover:bg-red-50 transition"
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
            </svg>
            Delete Post
          </button>
        </div>
      </div>

      <!-- Comments Section -->
      <div class="bg-white rounded-lg shadow-md overflow-hidden">
        <div class="border-b border-gray-200 bg-gray-50 px-6 py-4">
          <h2 class="text-xl font-semibold text-gray-800">Comments</h2>
        </div>
        <div class="p-6">
          <CommentList
            :post-id="post.id"
            class="mb-6"
            @comment-added="refreshPostData"
            @comment-deleted="refreshPostData"
            @comment-updated="refreshPostData"
          />
          <div class="border-t pt-6">
            <CommentForm :post-id="post.id" @comment-added="refreshPostData" />          </div>
        </div>
      </div>
    </div>

    <div v-else class="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 rounded">
      <p class="font-medium">Post not found.</p>
    </div>
  </div>
</template>

<script setup>
// Import computed
import { computed, onMounted } from 'vue';
import { useRoute, useRouter } from 'vue-router';
import { usePostsStore } from '@/stores/posts';
import { useAuthStore } from '@/stores/auth';
import CommentList from '@/components/comments/CommentList.vue';
import CommentForm from '@/components/comments/CommentForm.vue';

// Define base URL
const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:3000';

const route = useRoute();
const router = useRouter();
const postsStore = usePostsStore();
const authStore = useAuthStore();
const post = computed(() => postsStore.currentPost);
const loading = computed(() => postsStore.loading);
const error = computed(() => postsStore.error);

// NEW: Computed property for the full image URL
const fullImageUrl = computed(() => {
  // Make sure post and post.value exist before accessing image_url
  if (!post.value || !post.value.image_url) {
    return ''; // Return empty string if no image URL
  }

  // Check if it's already an absolute URL (starts with http)
  if (post.value.image_url.startsWith('http')) {
    return post.value.image_url;
  }

  // Otherwise, prepend the base URL
  return `${API_BASE_URL}${post.value.image_url}`;
});

const refreshPostData = () => {
   postsStore.fetchPost(route.params.id);
};
onMounted(async () => {
    try { // Add try...catch for better error handling during fetch
        await postsStore.fetchPost(route.params.id);
    } catch (fetchError) {
        console.error("Error fetching post in PostView:", fetchError);
        // Error is already handled by the template's v-else-if="error",
        // but you could add specific logic here if needed.
         if (fetchError.response && fetchError.response.status === 404) {
            router.push('/404'); // Redirect on 404
        }
    }
});

const deleteCurrentPost = async () => {
  if (confirm('Are you sure you want to delete this post? This action cannot be undone.')) {
    try {
      await postsStore.deletePost(route.params.id);
      router.push('/');
    } catch (error) {
      console.error('Error deleting post:', error);
      // Optionally display an error message to the user
    }
  }
};

const handleLike = async (likeType) => {
  try {
    await postsStore.updateLikeStatus(route.params.id, likeType);
     // No need to manually fetch, updateLikeStatus should trigger fetchPost in the store
  } catch (error) {
    console.error('Error updating like status:', error);
     // Optionally display an error message to the user
  }
};

const handleRemoveLike = async () => {
  try {
    await postsStore.deleteLikeStatus(route.params.id);
     // No need to manually fetch, deleteLikeStatus should trigger fetchPost in the store
  } catch (error) {
    console.error('Error removing like:', error);
     // Optionally display an error message to the user
  }
};

// This function can be used to refresh comments and potentially post data (like comment count)
// if the stores don't handle it automatically after add/delete/update
const handleCommentAdded = () => {
  // Re-fetch the post data to update comment count or other related info if necessary
   postsStore.fetchPost(route.params.id);
   // The CommentList component should ideally re-fetch itself via its props watcher
   // or you could emit an event from CommentForm up to here, then pass it down to CommentList
};

</script>

<style scoped>
img {
  transition: transform 0.3s ease;
}

/* Optional: Style the prose content if needed */
.prose :deep(p) { /* Example targeting paragraphs within v-html */
  @apply mb-4 leading-relaxed;
}
.prose :deep(h2) {
  @apply text-2xl font-semibold mt-6 mb-3;
}
/* Add more styles for other elements like lists, code blocks etc. */
</style>

// C:\thangs\NODE_JS\blog-system_backup\blog-system\frontend\src\views\admin\DashboardView.vue
// .\src\views\admin\DashboardView.vue
<template>
    <div class="admin-dashboard">
      <h1 class="text-3xl font-bold mb-6">Admin Dashboard</h1>
      <p>Welcome to the admin dashboard. You can manage users and posts here.</p>
      <div class="grid grid-cols-2 gap-4 mt-6">
        <router-link to="/admin/users" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-4 px-6 rounded">
          Manage Users
        </router-link>
         <router-link to="/admin/register" class="bg-green-500 hover:bg-green-700 text-white font-bold py-4 px-6 rounded">
            Register Admin (Owner Only)
        </router-link>
      </div>
    </div>
</template>

// C:\thangs\NODE_JS\blog-system_backup\blog-system\frontend\src\views\admin\AdminRegisterView.vue
// C:\thangs\NODE_JS\blog-system_backup\blog-system\frontend\src\views\admin\AdminRegisterView.vue
<template>
  <div class="admin-register-page py-12 bg-gray-50">
    <div class="max-w-md mx-auto">
      <div class="bg-mint-500 p-6 rounded-t-lg shadow-md text-center">
        <h1 class="text-2xl font-bold text-white">Register New Admin</h1>
        <p class="text-mint-100">Create an administrator account (Owner Access Required).</p>
      </div>
      <div class="bg-white rounded-b-lg shadow-md p-6">
        <RegisterForm />
      </div>
    </div>
  </div>
</template>

<script setup>
import RegisterForm from '@/components/auth/RegisterForm.vue';
</script>

// C:\thangs\NODE_JS\blog-system_backup\blog-system\frontend\src\views\ProfileView.vue

<template>
  <div class="profile-view">
    <!-- Mint Themed Banner -->
    <div class="bg-mint-500 text-white p-8 rounded-t-lg shadow-md">
      <h1 class="text-3xl font-bold">My Profile</h1>
      <p class="text-mint-100">Manage your personal information</p>
    </div>

    <div v-if="loading" class="flex justify-center py-12">
      <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-mint-500"></div>
    </div>

    <div v-else-if="error" class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6 rounded">
      <p class="font-medium">Error: {{ error.message }}</p>
      <p v-if="error.errors && Array.isArray(error.errors)">
        <span v-for="err in error.errors" :key="err.path" class="block text-sm">{{ err.msg }}</span>
      </p>
    </div>

    <div v-else-if="userProfile" class="bg-white rounded-b-lg shadow-md p-6">
      <div class="flex flex-col md:flex-row md:space-x-8">
        <div class="md:w-1/3 mb-6 md:mb-0">
          <div class="flex flex-col items-center">
            <!-- *** MODIFIED IMG TAG *** -->
            <img
              v-if="userProfile.UserProfile?.avatar && !avatarPreview" 
              :src="fullAvatarUrl"
              alt="User Avatar"
              class="w-40 h-40 rounded-full object-cover border-4 border-mint-100 shadow-md mb-4"
            />
            <img
              v-else-if="avatarPreview"
              :src="avatarPreview"
              alt="Avatar Preview"
              class="w-40 h-40 rounded-full object-cover border-4 border-mint-100 shadow-md mb-4"
            />
            <div v-else class="w-40 h-40 rounded-full bg-gray-200 flex items-center justify-center text-gray-400 text-5xl mb-4">
              <span>{{ userProfile.UserProfile?.name ? userProfile.UserProfile.name[0].toUpperCase() : '?' }}</span> <!-- Display initial or ? -->
            </div>
            <!-- End of Modified Section -->
            <h2 class="text-xl font-semibold text-gray-800">
              {{ userProfile.UserProfile?.name || 'Your Name' }}
            </h2>
            <p class="text-gray-500 text-sm">{{ userProfile.email }}</p>
            <span class="mt-2 px-3 py-1 text-xs font-medium rounded-full"
              :class="{
                'bg-purple-100 text-purple-800': userProfile.role === 'owner',
                'bg-indigo-100 text-indigo-800': userProfile.role === 'admin',
                'bg-mint-100 text-mint-800': userProfile.role === 'user'
              }">
              {{ userProfile.role }}
            </span>
          </div>
        </div>

        <div class="md:w-2/3">
          <div v-if="isEditing" class="space-y-4">
            <div>
              <label class="block text-gray-700 text-sm font-medium mb-2">Name:</label>
              <input
                type="text"
                v-model="editedProfile.name"
                class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-mint-500 transition"
                placeholder="Your name"
              />
            </div>

            <div>
              <label class="block text-gray-700 text-sm font-medium mb-2">Avatar:</label>
              <input
                type="file"
                @change="onAvatarChange"
                accept="image/*"
                class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-mint-500 transition file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-mint-600 file:text-white file:hover:bg-mint-700"
              />
               <p class="text-xs text-gray-500 mt-1">Upload a new image to change your avatar.</p>
            </div>

            <div>
              <label class="block text-gray-700 text-sm font-medium mb-2">Bio:</label>
              <textarea
                v-model="editedProfile.bio"
                rows="4"
                class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-mint-500 transition"
                placeholder="Tell us about yourself"
              ></textarea>
            </div>
          </div>

          <div v-else class="space-y-4">
            <div>
              <h3 class="text-lg font-medium text-gray-800 border-b border-gray-200 pb-1 mb-2">About Me</h3>
              <p class="text-gray-700 whitespace-pre-wrap">{{ userProfile.UserProfile?.bio || 'No bio added yet' }}</p> <!-- Added whitespace-pre-wrap -->
            </div>

            <div class="mt-4">
              <h3 class="text-lg font-medium text-gray-800 border-b border-gray-200 pb-1 mb-2">Contact Information</h3>
              <div class="flex items-center text-gray-700">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                </svg>
                {{ userProfile.email }}
              </div>
            </div>
          </div>
        </div>
      </div>

      <div class="mt-8 border-t border-gray-200 pt-6" v-if="authStore.isAuthenticated && authStore.user.id === userProfile.id">
        <div v-if="!isEditing" class="flex flex-wrap gap-3">
          <button
            @click="startEditing"
            class="px-4 py-2 bg-mint-600 text-white rounded-md hover:bg-mint-700 transition flex items-center"
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor" >
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
            </svg>
            Edit Profile
          </button>

          <button
            @click="deleteAccount"
            class="px-4 py-2 bg-white border border-red-500 text-red-500 rounded-md hover:bg-red-50 transition flex items-center"
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
            </svg>
            Delete Account
          </button>
        </div>

        <div v-else class="flex flex-wrap gap-3">
          <button
            @click="saveProfile"
            :disabled="isSaving"
            class="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition flex items-center disabled:bg-gray-400 disabled:cursor-not-allowed"
          >
            <svg v-if="isSaving" class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            <svg v-else xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
            </svg>
            {{ isSaving ? 'Saving...' : 'Save Changes' }}
          </button>

          <button
            @click="cancelEditing"
            :disabled="isSaving" 
            class="px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600 transition flex items-center disabled:opacity-50 disabled:cursor-not-allowed">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
            Cancel
          </button>
        </div>
      </div>
    </div>

    <div v-else class="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 rounded">
      <p class="font-medium">Profile not found.</p>
    </div>

    <p v-if="errorMessage" class="mt-4 bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded">
      {{ errorMessage }}
    </p>
  </div>
</template>

<script setup>
// *** ADD computed TO IMPORTS ***
import { ref, computed, onMounted, reactive } from 'vue';
import { useUsersStore } from '@/stores/users';
import { useAuthStore } from '@/stores/auth';
import { useRouter } from 'vue-router';

// *** DEFINE API_BASE_URL ***
const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:3000';

const usersStore = useUsersStore();
const authStore = useAuthStore();
const router = useRouter();

const userProfile = computed(() => usersStore.userProfile);
const loading = computed(() => usersStore.loading);
const error = computed(() => usersStore.error); // Use computed error
const isEditing = ref(false);
const errorMessage = ref('');
const selectedFile = ref(null);
const avatarPreview = ref(null);
const isSaving = ref(false); // Added saving state

const editedProfile = reactive({
  name: '',
  bio: '',
});

// *** ADD fullAvatarUrl COMPUTED PROPERTY ***
const fullAvatarUrl = computed(() => {
  const avatar = userProfile.value?.UserProfile?.avatar;
  if (!avatar) {
    return ''; // No avatar set
  }
  if (avatar.startsWith('http://') || avatar.startsWith('https://')) {
    return avatar; // Already an absolute URL
  }
  // Prepend base URL for relative paths
  return `${API_BASE_URL}${avatar}`;
});

onMounted(async () => {
  await usersStore.fetchUserProfile();
  // Initialize edit form *after* profile is loaded
  initializeEditedProfile();
});

// Helper function to initialize the edit form
const initializeEditedProfile = () => {
    if (userProfile.value && userProfile.value.UserProfile) {
        editedProfile.name = userProfile.value.UserProfile.name || '';
        editedProfile.bio = userProfile.value.UserProfile.bio || '';
    } else {
        editedProfile.name = '';
        editedProfile.bio = '';
    }
};

const startEditing = () => {
  isEditing.value = true;
  avatarPreview.value = null; // Reset preview when starting edit
  errorMessage.value = ''; // Clear previous errors
  initializeEditedProfile(); // Ensure form has latest data
};

const cancelEditing = () => {
  isEditing.value = false;
  avatarPreview.value = null; // Reset preview
  selectedFile.value = null; // Clear selected file
  errorMessage.value = ''; // Clear errors
  initializeEditedProfile(); // Reset form to original values
};

const onAvatarChange = (event) => {
    const file = event.target.files[0];
    errorMessage.value = ''; // Clear previous errors
    const maxSize = 5 * 1024 * 1024; // 5MB

    if (file) {
        // Basic validation
        if (!file.type.startsWith('image/')) {
            errorMessage.value = 'Please select an image file.';
            selectedFile.value = null;
            avatarPreview.value = null;
            event.target.value = ''; // Clear the input
            return;
        }
        if (file.size > maxSize) {
             errorMessage.value = 'Image size must be less than 5MB.';
            selectedFile.value = null;
            avatarPreview.value = null;
            event.target.value = ''; // Clear the input
            return;
        }

        selectedFile.value = file;
        // Create preview URL
        const reader = new FileReader();
        reader.onload = (e) => {
            avatarPreview.value = e.target.result;
        };
        reader.readAsDataURL(file);

    } else {
        selectedFile.value = null;
        avatarPreview.value = null;
    }
};

const saveProfile = async () => {
    isSaving.value = true; // Set saving state
    errorMessage.value = ''; // Clear previous errors

    const formData = new FormData();
    // Only append fields if they are not null/undefined, or handle on backend
    formData.append('name', editedProfile.name ?? '');
    formData.append('bio', editedProfile.bio ?? '');
    if (selectedFile.value) {
        formData.append('avatar', selectedFile.value);
    }

    try {
        const response = await usersStore.updateUserProfile(formData);
        // Update successful
        isEditing.value = false;
        selectedFile.value = null; // Clear selected file
        avatarPreview.value = null; // Clear preview
        // The store update should automatically refresh the view via computed properties
        // If the store doesn't update the nested UserProfile correctly, you might need:
        // await usersStore.fetchUserProfile(); // Re-fetch to be sure
         initializeEditedProfile(); // Refresh form state just in case
    } catch (err) { // Catch specific error from store
        console.error("Failed to save profile", err);
        // Extract specific error messages if available
        if (err.response?.data?.errors && Array.isArray(err.response.data.errors)) {
            errorMessage.value = err.response.data.errors.map(e => e.msg).join(', ');
        } else if (err.response?.data?.message) {
            errorMessage.value = err.response.data.message;
        } else {
            errorMessage.value = 'An error occurred while saving. Please try again.';
        }
    } finally {
        isSaving.value = false; // Reset saving state
    }
};

const deleteAccount = async () => {
  // Add confirmation
  if(confirm('Are you sure you want to delete your account? This action is permanent and cannot be undone.')) {
    isSaving.value = true; // Use saving state for delete as well
    errorMessage.value = '';
    try {
      await authStore.deleteUserAccount();
      // Logout happens automatically via interceptor or store logic usually
      // No need to call authStore.logout() here if the API call triggers it
      router.push('/login?message=Account deleted successfully'); // Redirect with message
    } catch (err) {
      console.error('Error deleting account', err);
       if (err.response?.data?.message) {
            errorMessage.value = err.response.data.message;
        } else {
            errorMessage.value = 'Failed to delete account. Please try again.';
        }
         isSaving.value = false; // Reset saving state only on error
    }
    // Don't reset isSaving here if successful, as we are navigating away
  }
};
</script>

<style scoped>
/* Add styles for the saving spinner or disabled states if needed */
</style>

// C:\thangs\NODE_JS\blog-system_backup\blog-system\frontend\src\views\admin\UserManagementView.vue
// .\src\views\admin\UserManagementView.vue
<template>
  <div class="user-management">
    <h1 class="text-3xl font-bold mb-6">User Management</h1>
    <div v-if="loading" class="text-center">Loading users...</div>
    <div v-else-if="error" class="text-red-500">Error: {{ error.message }}</div>
    <div v-else>
      <table class="min-w-full divide-y divide-gray-200">
        <thead class="bg-gray-50">
          <tr>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              ID
            </th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Email
            </th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Role
            </th>
             <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Name
            </th>
            <th scope="col" class="relative px-6 py-3">
              <span class="sr-only">Actions</span>
            </th>
          </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200">
          <tr v-for="user in allUsers" :key="user.id">
            <td class="px-6 py-4 whitespace-nowrap">
              {{ user.id }}
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
              {{ user.email }}
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
              {{ user.role }}
            </td>
             <td class="px-6 py-4 whitespace-nowrap">
              {{ user.UserProfile?.name || 'N/A' }}
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
              <router-link :to="{ name: 'adminUserProfile', params: { userId: user.id } }" class="text-mint-600 hover:text-mint-900 mr-4">                View/Edit
              </router-link>
              <button @click="deleteUser(user.id)" class="text-red-600 hover:text-red-900">Delete</button>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>
</template>

<script setup>
import { onMounted, computed } from 'vue';
import { useUsersStore } from '@/stores/users';

const usersStore = useUsersStore();
const allUsers = computed(() => usersStore.allUsers);
const loading = computed(() => usersStore.loading);
const error = computed(() => usersStore.error);

onMounted(() => {
  usersStore.fetchAllUsers();
});

const deleteUser = async (userId) => {
  if (confirm('Are you sure you want to delete this user?')) {
      try {
        await usersStore.deleteAnyUser(userId);
        usersStore.fetchAllUsers(); // Refresh list after deletion
      } catch(error) {
        console.error("Failed to delete", error)
      }

  }
};
</script>

// C:\thangs\NODE_JS\blog-system_backup\blog-system\frontend\src\views\OwnerLoginView.vue
<template>
  <div class="owner-login-page py-12 bg-gray-50">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div v-if="hasStats" class="lg:grid lg:grid-cols-2 lg:gap-8 items-center justify-center">
        <!-- Left side: Site Statistics -->
        <div class="py-8 lg:py-16 flex justify-center">
          <div class="bg-mint-100 rounded-lg p-6 shadow-md text-mint-800 w-full max-w-md">
            <h2 class="text-2xl font-bold mb-4">Site Overview</h2>
            <div class="mb-6">
              <p class="font-semibold">Total Visitors:</p>
              <p class="text-lg">{{ totalVisitors }}</p>
            </div>
            <div class="mb-6">
              <p class="font-semibold">Registered Users:</p>
              <p class="text-lg">{{ registeredUsers }}</p>
            </div>
            <div>
              <p class="font-semibold">Total Posts:</p>
              <p class="text-lg">{{ totalPosts }}</p>
            </div>
          </div>
        </div>

        <!-- Right side: Owner Login Form -->
        <div class="py-8 lg:py-16 flex justify-center">
          <div class="bg-white rounded-lg shadow-md p-8 w-full max-w-md">
            <div class="bg-mint-500 p-6 rounded-t-lg text-center -mt-8 -mx-8">
              <h1 class="text-2xl font-bold text-white">Owner Login</h1>
              <p class="text-mint-100">Access your administration panel</p>
            </div>
            <div class="p-6">
              <OwnerLoginForm />
            </div>
          </div>
        </div>
      </div>

      <!-- Simplified layout when no stats -->
      <div v-else class="flex justify-center">
        <div class="bg-white rounded-lg shadow-md p-8 w-full max-w-md">
          <div class="bg-mint-500 p-6 rounded-t-lg text-center -mt-8 -mx-8">
            <h1 class="text-2xl font-bold text-white">Owner Login</h1>
            <p class="text-mint-100">Access your administration panel</p>
          </div>
          <div class="p-6">
            <OwnerLoginForm />
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import OwnerLoginForm from '@/components/auth/OwnerLoginForm.vue';
import { ref, onMounted } from 'vue';

const totalVisitors = ref(0);
const registeredUsers = ref(0);
const totalPosts = ref(0);
const hasStats = ref(false);

const fetchSiteStats = async () => {
  try {
    const response = await fetch('/api/admin/stats');
    if (!response.ok) throw new Error('Failed to fetch stats');
    
    const data = await response.json();
    totalVisitors.value = data.totalVisitors;
    registeredUsers.value = data.registeredUsers;
    totalPosts.value = data.totalPosts;
    hasStats.value = true;
  } catch (error) {
    console.error('Error fetching site stats:', error);
    hasStats.value = false;
  }
};

onMounted(() => {
  fetchSiteStats();
});
</script>


// C:\thangs\NODE_JS\blog-system_backup\blog-system\frontend\src\views\admin\AdminUserProfileView.vue
// C:\thangs\NODE_JS\blog-system_backup\blog-system\frontend\src\views\admin\AdminUserProfileView.vue
<template>
  <div class="admin-user-profile">
    <h1 class="text-2xl font-bold mb-4">User Profile (Admin View)</h1>

    <div v-if="loading" class="text-center">Loading user profile...</div>
    <div v-else-if="error" class="text-red-500">Error: {{ error.message }}</div>
    <div v-else-if="user">
      <div class="mb-4">
        <label class="block text-gray-700 text-sm font-bold mb-2">User ID:</label>
        <p>{{ user.id }}</p>
      </div>
      <div class="mb-4">
        <label class="block text-gray-700 text-sm font-bold mb-2">Email:</label>
        <p>{{ user.email }}</p>
      </div>
       <div class="mb-4">
        <label class="block text-gray-700 text-sm font-bold mb-2">Role:</label>
        <p>{{ user.role }}</p>
      </div>
      <div class="mb-4">
        <label class="block text-gray-700 text-sm font-bold mb-2">Name:</label>
        <input v-if="isEditing" type="text" v-model="editedProfile.name" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" />
        <p v-else>{{ user.UserProfile?.name || 'Not set' }}</p>
      </div>
      <div class="mb-4">
        <label class="block text-gray-700 text-sm font-bold mb-2">Avatar URL:</label>
        <input v-if="isEditing" type="url" v-model="editedProfile.avatar" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"/>
       <!-- Display the raw URL only if editing or no image -->
       <p v-if="isEditing || !fullAdminAvatarUrl">{{ user.UserProfile?.avatar || 'Not set' }}</p>
         <img v-if="!isEditing && fullAdminAvatarUrl" :src="fullAdminAvatarUrl" alt="User Avatar" class="mt-2 w-32 h-32 rounded-full object-cover" />
        <!-- Show a placeholder if no avatar -->
        <div v-if="!isEditing && !fullAdminAvatarUrl" class="mt-2 w-32 h-32 rounded-full bg-gray-200 flex items-center justify-center text-gray-400">
          No Avatar
        </div>
      </div>
      <div class="mb-4">
        <label class="block text-gray-700 text-sm font-bold mb-2">Bio:</label>
        <textarea v-if="isEditing" v-model="editedProfile.bio" rows="4" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"></textarea>
        <p v-else>{{ user.UserProfile?.bio || 'Not set' }}</p>
      </div>
      <div>
        <button v-if="!isEditing" @click="startEditing" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
          Edit Profile
        </button>
        <div v-else>
          <button @click="saveProfile" class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline mr-2">
            Save Changes
          </button>
          <button @click="cancelEditing" class="bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
            Cancel
          </button>
        </div>
      </div>
    </div>
    <div v-else>User not found.</div>
     <p v-if="errorMessage" class="text-red-500 mt-2">{{ errorMessage }}</p>
  </div>
</template>

<script setup>
import { ref, computed, onMounted, reactive } from 'vue';
import { useUsersStore } from '@/stores/users';
import { useRoute, useRouter } from 'vue-router';

// Define base URL (Make sure VITE_API_URL is set in your .env file)
const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:3000';

const usersStore = useUsersStore();
const route = useRoute();
const router = useRouter();
const userId = route.params.userId;

const user = ref(null);
const loading = ref(false);
const error = ref(null);
const isEditing = ref(false);
const errorMessage = ref('');

const editedProfile = reactive({
  name: '',
  avatar: '',
  bio: '',
});

// Computed property to get the full avatar URL
const fullAdminAvatarUrl = computed(() => {
  const avatarPath = user.value?.UserProfile?.avatar;
  if (!avatarPath) {
    return ''; // No avatar path available
  }
  // Check if it's already an absolute URL
  if (avatarPath.startsWith('http://') || avatarPath.startsWith('https://')) {
    return avatarPath;
  }
  // Prepend base URL if it's a relative path
  return `${API_BASE_URL}${avatarPath}`;
});

onMounted(async () => {
  try {
    loading.value = true;
    user.value = await usersStore.fetchAnyUserProfile(userId);
     // Initialize editedProfile with current profile data
    initializeEditedProfile(); // Call the helper function
  } catch (err) {
    error.value = err;
    if (err.response && err.response.status === 404) {
      router.push('/404'); // Or some other error page
    }
  } finally {
    loading.value = false;
  }
});

// Helper function to initialize or reset the edit form
const initializeEditedProfile = () => {
  if (user.value && user.value.UserProfile) {
    editedProfile.name = user.value.UserProfile.name || '';
    editedProfile.avatar = user.value.UserProfile.avatar || ''; // Store the raw path for the input
    editedProfile.bio = user.value.UserProfile.bio || '';
  } else {
    // Reset if no profile data exists
    editedProfile.name = '';
    editedProfile.avatar = '';
    editedProfile.bio = '';
  }
};

const startEditing = () => {
  isEditing.value = true;

  initializeEditedProfile(); // Ensure form has latest data
};

const cancelEditing = () => {
  isEditing.value = false;

  initializeEditedProfile(); // Reset form to original values
};

const saveProfile = async () => {
 loading.value = true; // Indicate saving process
 errorMessage.value = ''; // Clear previous errors
  try {
   const updatedUserData = await usersStore.updateAnyUserProfile(userId, editedProfile);
    isEditing.value = false;

   // Update the local user ref with the potentially updated profile data from the response
   if (updatedUserData && user.value) {
       user.value.UserProfile = { ...user.value.UserProfile, ...updatedUserData }; // Merge updates
   }
   initializeEditedProfile(); // Re-sync edit form state
  } catch (error) {
    console.error('Error saving profile:', error);
    if (error.response && error.response.data && error.response.data.message) {
        // Handle general error message
        errorMessage.value = error.response.data.message;
     } else if (error.response?.data?.errors) {
        // Handle validation errors specifically
        errorMessage.value = error.response.data.errors.map(e => e.msg).join(', ');
      } else {
        // Fallback error message
        errorMessage.value = 'An error occurred. Please try again.';
      }
 } finally {
    loading.value = false; // End saving process
  }
};
</script>

